{"name":"AppiumLibrary","version":"1.5.0.3","keywords":[{"name":"Background App","args":["seconds=5"],"doc":"Puts the application in the background on the device for a certain duration."},{"name":"Capture Page Screenshot","args":["filename=None"],"doc":"Takes a screenshot of the current page and embeds it into the log.\n\nfilename argument specifies the name of the file to write the screenshot into. If no filename is given, the screenshot is saved into file appium-screenshot-<counter>.png under the directory where the Robot Framework log file is written into. The filename is also considered relative to the same directory, if it is not given in absolute format.\n\ncss can be used to modify how the screenshot is taken. By default the bakground color is changed to avoid possible problems with background leaking when the page layout is somehow broken."},{"name":"Clear Text","args":["locator"],"doc":"Clears the text field identified by locator.\n\nSee [introduction](#Introduction) for details about locating elements."},{"name":"Click A Point","args":["x=0","y=0","duration=100"],"doc":"Click on a point"},{"name":"Click Button","args":["index_or_name"],"doc":"Click button"},{"name":"Click Element","args":["locator"],"doc":"Click element identified by locator.\n\nKey attributes for arbitrary elements are index and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Click Element At Coordinates","args":["coordinate_X","coordinate_Y"],"doc":"click element at a certain coordinate"},{"name":"Click Text","args":["text","exact_match=False"],"doc":"Click text identified by `text`.\n\nBy default tries to click first text involves given `text`, if you would like to click exactly matching text, then set `exact_match` to True.\n\nIf there are multiple use of `text` and you do not want first one, use locator with [Get Web Elements](#Get%20Webelements) instead."},{"name":"Close All Applications","args":[],"doc":"Closes all open applications.\n\nThis keyword is meant to be used in test or suite teardown to make sure all the applications are closed before the test execution finishes.\n\nAfter this keyword, the application indices returned by [Open Application](#Open%20Application) are reset and start from 1."},{"name":"Close Application","args":[],"doc":"Closes the current application and also close webdriver session."},{"name":"Element Attribute Should Match","args":["locator","attr_name","match_pattern","regexp=False"],"doc":"Verify that an attribute of an element matches the expected criteria.\n\nThe element is identified by _locator_. See [introduction](#Introduction) for details about locating elements. If more than one element matches, the first element is selected.\n\nThe _attr\\_name_ is the name of the attribute within the selected element.\n\nThe _match\\_pattern_ is used for the matching, if the match\\_pattern is\n\n*   boolean or 'True'/'true'/'False'/'false' String then a boolean match is applied\n*   any other string is cause a string match\n\nThe _regexp_ defines whether the string match is done using regular expressions (i.e. BuiltIn Library's [Should Match Regexp](http://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Match%20Regexp) or string pattern match (i.e. BuiltIn Library's [Should Match](http://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Match))\n\nExamples:\n\n```\nElement Attribute Should Match  xpath = //*[contains(@text,'foo')]  text  *foobar  \nElement Attribute Should Match  xpath = //*[contains(@text,'foo')]  text  f.*ar  regexp = True\nElement Attribute Should Match  xpath = //*[contains(@text,'foo')]  enabled  True  \n```\n\n1\\. is a string pattern match i.e. the 'text' attribute should end with the string 'foobar'\n2. is a regular expression match i.e. the regexp 'f.\\*ar' should be within the 'text' attribute\n3. is a boolead match i.e. the 'enabled' attribute should be True\n\n_**NOTE:**_ On Android the supported attribute names are hard-coded in the [AndroidElement](https://github.com/appium/appium/blob/master/lib/devices/android/bootstrap/src/io/appium/android/bootstrap/AndroidElement.java) Class's getBoolAttribute() and getStringAttribute() methods. Currently supported (appium v1.4.11): _contentDescription, text, className, resourceId, enabled, checkable, checked, clickable, focusable, focused, longClickable, scrollable, selected, displayed_\n\n_**NOTE:**_ Some attributes can be evaluated in two different ways e.g. these evaluate the same thing:\n\n```\nElement Attribute Should Match  xpath = //*[contains(@text,'example text')]  name  txt_field_name\nElement Name Should Be  xpath = //*[contains(@text,'example text')]  txt_field_name  \n```"},{"name":"Element Name Should Be","args":["locator","expected"],"doc":""},{"name":"Element Should Be Disabled","args":["locator","loglevel=INFO"],"doc":"Verifies that element identified with locator is disabled.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Element Should Be Enabled","args":["locator","loglevel=INFO"],"doc":"Verifies that element identified with locator is enabled.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Element Should Be Visible","args":["locator","loglevel=INFO"],"doc":"Verifies that element identified with locator is visible.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements.\n\nNew in AppiumLibrary 1.4.5"},{"name":"Element Should Contain Text","args":["locator","expected","message="],"doc":"Verifies element identified by `locator` contains text `expected`.\n\nIf you wish to assert an exact (not a substring) match on the text of the element, use [Element Text Should Be](#Element%20Text%20Should%20Be).\n\nKey attributes for arbitrary elements are `id` and `xpath`. `message` can be used to override the default error message.\n\nNew in AppiumLibrary 1.4."},{"name":"Element Should Not Contain Text","args":["locator","expected","message="],"doc":"Verifies element identified by `locator` does not contain text `expected`.\n\n`message` can be used to override the default error message. See [Element Should Contain Text](#Element%20Should%20Contain%20Text) for more details."},{"name":"Element Text Should Be","args":["locator","expected","message="],"doc":"Verifies element identified by `locator` exactly contains text `expected`.\n\nIn contrast to [Element Should Contain Text](#Element%20Should%20Contain%20Text), this keyword does not try a substring match but an exact match on the element identified by `locator`.\n\n`message` can be used to override the default error message.\n\nNew in AppiumLibrary 1.4."},{"name":"Element Value Should Be","args":["locator","expected"],"doc":""},{"name":"Execute Async Script","args":["script"],"doc":"Inject a snippet of Async-JavaScript into the page for execution in the context of the currently selected frame (Web context only).\n\nThe executed script is assumed to be asynchronous and must signal that is done by invoking the provided callback, which is always provided as the final argument to the function.\n\nThe value to this callback will be returned to the client.\n\nNew in AppiumLibrary 1.5"},{"name":"Execute Script","args":["script"],"doc":"Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame (Web context only).\n\nThe executed script is assumed to be synchronous and the result of evaluating the script is returned to the client.\n\nNew in AppiumLibrary 1.5"},{"name":"Get Activity","args":[],"doc":"Retrieves the current activity on the device.\n\nAndroid only."},{"name":"Get Appium SessionId","args":[],"doc":"Returns the current session ID as a reference"},{"name":"Get Appium Timeout","args":[],"doc":"Gets the timeout in seconds that is used by various keywords.\n\nSee [Set Appium Timeout](#Set%20Appium%20Timeout) for an explanation."},{"name":"Get Capability","args":["capability_name"],"doc":"Return the desired capability value by desired capability name"},{"name":"Get Contexts","args":[],"doc":"Get available contexts."},{"name":"Get Current Context","args":[],"doc":"Get current context."},{"name":"Get Element Attribute","args":["locator","attribute"],"doc":"Get element attribute using given attribute: name, value,...\n\nExamples:\n\n```\nGet Element Attribute  locator  name\nGet Element Attribute  locator  value\n```"},{"name":"Get Element Location","args":["locator"],"doc":"Get element location\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Get Element Size","args":["locator"],"doc":"Get element size\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Get Matching Xpath Count","args":["xpath"],"doc":"Returns number of elements matching `xpath`\n\nOne should not use the xpath= prefix for 'xpath'. XPath is assumed.\n\n```\nCorrect:    \n${count}  Get Matching Xpath Count  //android.view.View[@text='Test']\nIncorrect:    \n${count}  Get Matching Xpath Count  xpath=//android.view.View[@text='Test']\n```\n\nIf you wish to assert the number of matching elements, use [Xpath Should Match X Times](#Xpath%20Should%20Match%20X%20Times).\n\nNew in AppiumLibrary 1.4."},{"name":"Get Network Connection Status","args":[],"doc":"Returns an integer bitmask specifying the network connection type.\n\nAndroid only.\n\nSee [set network connection status](#Set%20Network%20Connection%20Status) for more details."},{"name":"Get Source","args":[],"doc":"Returns the entire source of the current page."},{"name":"Get Text","args":["locator"],"doc":"Get element text (for hybrid and mobile browser use xpath locator, others might cause problem)\n\nExample:\n\n```\n${text}  Get Text  //*[contains(@text,'foo')]\n```\n\nNew in AppiumLibrary 1.4."},{"name":"Get Webelement","args":["locator"],"doc":"Returns the first [WebElement](http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement) object matching `locator`.\n\nExample:\n\n```\n${element}  Get Webelement  id=my_element\nClick Element  ${element}  \n```\n\nNew in AppiumLibrary 1.4."},{"name":"Get Webelements","args":["locator"],"doc":"Returns list of [WebElement](http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement) objects matching `locator`.\n\nExample:\n\n```\n@{elements}  Get Webelements  id=my_element\nClick Element  @{elements}[2]  \n```\n\nThis keyword was changed in AppiumLibrary 1.4 in following ways:\n\n*   Name is changed from Get Elements to current one.\n*   Deprecated argument `fail_on_error`, use Run Keyword and Ignore Error if necessary.\n\nNew in AppiumLibrary 1.4."},{"name":"Get Window Height","args":[],"doc":"Get current device height.\n\nExample:\n\n```\n${width}  Get Window Height  \n${height}  Get Window Height  \nClick A Point  ${width  ${height}\n```\n\nNew in AppiumLibrary 1.4.5"},{"name":"Get Window Width","args":[],"doc":"Get current device width.\n\nExample:\n\n```\n${width}  Get Window Height  \n${height}  Get Window Height  \nClick A Point  ${width  ${height}\n```\n\nNew in AppiumLibrary 1.4.5"},{"name":"Go Back","args":[],"doc":"Goes one step backward in the browser history."},{"name":"Go To Url","args":["url"],"doc":"Opens URL in default web browser.\n\nExample:\n\n```\nOpen Application  http://localhost:4755/wd/hub  platformName=iOS  platformVersion=7.0  deviceName='iPhone Simulator'  browserName=Safari\nGo To URL  http://m.webapp.com        \n```"},{"name":"Hide Keyboard","args":["key_name=None"],"doc":"Hides the software keyboard on the device. (optional) In iOS, use key\\_name to press a particular key, ex. Done. In Android, no parameters are used."},{"name":"Input Password","args":["locator","text"],"doc":"Types the given password into text field identified by locator.\n\nDifference between this keyword and [Input Text](#Input%20Text) is that this keyword does not log the given password. See [introduction](#Introduction) for details about locating elements."},{"name":"Input Text","args":["locator","text"],"doc":"Types the given text into text field identified by locator.\n\nSee [introduction](#Introduction) for details about locating elements."},{"name":"Input Value","args":["locator","text"],"doc":"Sets the given value into text field identified by locator. This is an IOS only keyword, input value makes use of set\\_value\n\nSee [introduction](#Introduction) for details about locating elements."},{"name":"Install App","args":["app_path","app_package"],"doc":"Install App via Appium\n\nAndroid only.\n\n*   app\\_path - path to app\n*   app\\_package - package of install app to verify"},{"name":"Landscape","args":[],"doc":"Set the device orientation to LANDSCAPE"},{"name":"Launch Application","args":[],"doc":"Launch application. Application can be launched while Appium session running. This keyword can be used to launch application during test case or between test cases.\n\nThis keyword works while [Open Application](#Open%20Application) has a test running. This is good practice to [Launch Application](#Launch%20Application) and [Quit Application](#Quit%20Application) between test cases. As Suite Setup is [Open Application](#Open%20Application), Test Setup can be used to [Launch Application](#Launch%20Application)\n\nExample (syntax is just a representation, refer to RF Guide for usage of Setup/Teardown):\n\n```\n[Setup Suite]          \n  Open Application  http://localhost:4723/wd/hub  platformName=Android  deviceName=192.168.56.101:5555  app=${CURDIR}/demoapp/OrangeDemoApp.apk\n[Test Setup]          \n  Launch Application        \n    <<<test execution>>>      \n    <<<test execution>>>      \n[Test Teardown]          \n  Quit Application        \n[Suite Teardown]          \n  Close Application        \n```\n\nSee [Quit Application](#Quit%20Application) for quiting application but keeping Appium sesion running.\n\nNew in AppiumLibrary 1.4.6"},{"name":"Lock","args":["seconds=5"],"doc":"Lock the device for a certain period of time. iOS only."},{"name":"Log Source","args":["loglevel=INFO"],"doc":"Logs and returns the entire html source of the current page or frame.\n\nThe loglevel argument defines the used log level. Valid log levels are WARN, INFO (default), DEBUG, TRACE and NONE (no logging)."},{"name":"Long Press","args":["locator","duration=1000"],"doc":"Long press the element with optional duration"},{"name":"Long Press Keycode","args":["keycode","metastate=None"],"doc":"Sends a long press of keycode to the device.\n\nAndroid only.\n\nSee [press keycode](#Press%20Keycode) for more details."},{"name":"Open Application","args":["remote_url","alias=None","**kwargs"],"doc":"Opens a new application to given Appium server. Capabilities of appium server, Android and iOS, Please check [https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/server-args.md](https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/server-args.md)\n\n```\nOption  Man.  Description\nremote_url  Yes  Appium server url\nalias  no  alias\n```\n\nExamples:\n\n```\nOpen Application  http://localhost:4723/wd/hub  alias=Myapp1  platformName=iOS  platformVersion=7.0  deviceName='iPhone Simulator'  app=your.app  \nOpen Application  http://localhost:4723/wd/hub  platformName=Android  platformVersion=4.2.2  deviceName=192.168.56.101:5555  app=${CURDIR}/demoapp/OrangeDemoApp.apk  appPackage=com.netease.qa.orangedemo  appActivity=MainActivity\n```"},{"name":"Page Should Contain Element","args":["locator","loglevel=INFO"],"doc":"Verifies that current page contains locator element.\n\nIf this keyword fails, it automatically logs the page source using the log level specified with the optional loglevel argument. Giving NONE as level disables logging."},{"name":"Page Should Contain Text","args":["text","loglevel=INFO"],"doc":"Verifies that current page contains text.\n\nIf this keyword fails, it automatically logs the page source using the log level specified with the optional loglevel argument. Giving NONE as level disables logging."},{"name":"Page Should Not Contain Element","args":["locator","loglevel=INFO"],"doc":"Verifies that current page not contains locator element.\n\nIf this keyword fails, it automatically logs the page source using the log level specified with the optional loglevel argument. Giving NONE as level disables logging."},{"name":"Page Should Not Contain Text","args":["text","loglevel=INFO"],"doc":"Verifies that current page not contains text.\n\nIf this keyword fails, it automatically logs the page source using the log level specified with the optional loglevel argument. Giving NONE as level disables logging."},{"name":"Pinch","args":["locator","percent=200%","steps=1"],"doc":"Pinch in on an element a certain amount."},{"name":"Portrait","args":[],"doc":"Set the device orientation to PORTRAIT"},{"name":"Press Keycode","args":["keycode","metastate=None"],"doc":"Sends a press of keycode to the device.\n\nAndroid only.\n\nPossible keycodes & meta states can be found in [http://developer.android.com/reference/android/view/KeyEvent.html](http://developer.android.com/reference/android/view/KeyEvent.html)\n\nMeta state describe the pressed state of key modifiers such as Shift, Ctrl & Alt keys. The Meta State is an integer in which each bit set to 1 represents a pressed meta key.\n\nFor example\n\n*   META\\_SHIFT\\_ON = 1\n*   META\\_ALT\\_ON = 2\n\nmetastate=1 --> Shift is pressed\nmetastate=2 --> Alt is pressed\nmetastate=3 --> Shift+Alt is pressed\n\n*   \\_keycode- - the keycode to be sent to the device\n*   \\_metastate- - status of the meta keys"},{"name":"Pull File","args":["path","decode=False"],"doc":"Retrieves the file at path and return it's content.\n\nAndroid only.\n\n*   _path_ - the path to the file on the device\n*   _decode_ - True/False decode the data (base64) before returning it (default=False)"},{"name":"Pull Folder","args":["path","decode=False"],"doc":"Retrieves a folder at path. Returns the folder's contents zipped.\n\nAndroid only.\n\n*   _path_ - the path to the folder on the device\n*   _decode_ - True/False decode the data (base64) before returning it (default=False)"},{"name":"Push File","args":["path","data","encode=False"],"doc":"Puts the data in the file specified as path.\n\nAndroid only.\n\n*   _path_ - the path on the device\n*   _data_ - data to be written to the file\n*   _encode_ - True/False encode the data as base64 before writing it to the file (default=False)"},{"name":"Quit Application","args":[],"doc":"Quit application. Application can be quit while Appium session is kept alive. This keyword can be used to close application during test case or between test cases.\n\nSee [Launch Application](#Launch%20Application) for an explanation.\n\nNew in AppiumLibrary 1.4.6"},{"name":"Register Keyword To Run On Failure","args":["keyword"],"doc":"Sets the keyword to execute when a AppiumLibrary keyword fails.\n\nkeyword\\_name is the name of a keyword (from any available libraries) that will be executed if a AppiumLibrary keyword fails. It is not possible to use a keyword that requires arguments. Using the value \"Nothing\" will disable this feature altogether.\n\nThe initial keyword to use is set in [importing](#Importing), and the keyword that is used by default is [Capture Page Screenshot](#Capture%20Page%20Screenshot). Taking a screenshot when something failed is a very useful feature, but notice that it can slow down the execution.\n\nThis keyword returns the name of the previously registered failure keyword. It can be used to restore the original value later.\n\nExample:\n\n```\nRegister Keyword To Run On Failure  Log Source  # Run Log Source on failure.  \n${previous kw}=  Register Keyword To Run On Failure  Nothing  # Disables run-on-failure functionality and stores the previous kw name in a variable.\nRegister Keyword To Run On Failure  ${previous kw}  # Restore to the previous keyword.  \n```\n\nThis run-on-failure functionality only works when running tests on Python/Jython 2.4 or newer and it does not work on IronPython at all."},{"name":"Remove Application","args":["application_id"],"doc":"Removes the application that is identified with an application id\n\nExample:\n\n```\nRemove Application  com.netease.qa.orangedemo\n```"},{"name":"Reset Application","args":[],"doc":"Reset application. Open Application can be reset while Appium session is kept alive."},{"name":"Scroll","args":["start_locator","end_locator"],"doc":"Scrolls from one element to another Key attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Scroll Down","args":["locator"],"doc":"Scrolls down to element"},{"name":"Scroll Up","args":["locator"],"doc":"Scrolls up to element"},{"name":"Set Appium Timeout","args":["seconds"],"doc":"Sets the timeout in seconds used by various keywords.\n\nThere are several Wait ... keywords that take timeout as an argument. All of these timeout arguments are optional. The timeout used by all of them can be set globally using this keyword.\n\nThe previous timeout value is returned by this keyword and can be used to set the old value back later. The default timeout is 5 seconds, but it can be altered in [importing](#Importing).\n\nExample:\n\n```\n${orig timeout} =  Set Appium Timeout  15 seconds\nOpen page that loads slowly    \nSet Appium Timeout  ${orig timeout}  \n```"},{"name":"Set Location","args":["latitude","longitude","altitude=10"],"doc":"Set location\n\n*   _latitute_\n*   _longitude_\n*   _altitude_ = 10 \\[optional\\]\n\nAndroid only. New in AppiumLibrary 1.5"},{"name":"Set Network Connection Status","args":["connectionStatus"],"doc":"Sets the network connection Status.\n\nAndroid only.\n\nPossible values:\n\n```\nValue  Alias  Data  Wifi  Airplane Mode\n0  (None)  0  0  0\n1  (Airplane Mode)  0  0  1\n2  (Wifi only)  0  1  0\n4  (Data only)  1  0  0\n6  (All network on)  1  1  0\n```"},{"name":"Shake","args":[],"doc":"Shake the device"},{"name":"Start Activity","args":["appPackage","appActivity","**opts"],"doc":"Opens an arbitrary activity during a test. If the activity belongs to another application, that application is started and the activity is opened.\n\nAndroid only.\n\n*   _appPackage_ - The package containing the activity to start.\n*   _appActivity_ - The activity to start.\n*   _appWaitPackage_ - Begin automation after this package starts (optional).\n*   _appWaitActivity_ - Begin automation after this activity starts (optional).\n*   _intentAction_ - Intent to start (opt\\_ional).\n*   _intentCategory_ - Intent category to start (optional).\n*   _intentFlags_ - Flags to send to the intent (optional).\n*   _optionalIntentArguments_ - Optional arguments to the intent (optional).\n*   _stopAppOnReset_ - Should the app be stopped on reset (optional)?"},{"name":"Swipe","args":["start_x","start_y","offset_x","offset_y","duration=1000"],"doc":"Swipe from one point to another point, for an optional duration.\n\nArgs:\n\n*   start\\_x - x-coordinate at which to start\n*   start\\_y - y-coordinate at which to start\n*   offset\\_x - x-coordinate distance from start\\_x at which to stop\n*   offset\\_y - y-coordinate distance from start\\_y at which to stop\n*   duration - (optional) time to take the swipe, in ms.\n\nUsage:\n\n```\nSwipe  500  100  100  0  1000\n```\n\n_**NOTE:**_ Android 'Swipe' is not working properly, use `offset_x` and `offset_y` as if these are destination points."},{"name":"Swipe By Direction","args":["direction"],"doc":"swipe by given direction: left, right, down, up."},{"name":"Swipe By Percent","args":["start_x","start_y","end_x","end_y","duration=1000"],"doc":"Swipe from one percent of the screen to another percent, for an optional duration. Normal swipe fails to scale for different screen resolutions, this can be avoided using percent.\n\nArgs:\n\n*   start\\_x - x-percent at which to start\n*   start\\_y - y-percent at which to start\n*   end\\_x - x-percent distance from start\\_x at which to stop\n*   end\\_y - y-percent distance from start\\_y at which to stop\n*   duration - (optional) time to take the swipe, in ms.\n\nUsage:\n\n```\nSwipe By Percent  90  50  10  50  # Swipes screen from right to left.\n```\n\n_**NOTE:**_ This also considers swipe acts different between iOS and Android.\n\nNew in AppiumLibrary 1.4.5"},{"name":"Switch Application","args":["index_or_alias"],"doc":"Switches the active application by index or alias.\n\nindex\\_or\\_alias is either application index (an integer) or alias (a string). Index is got as the return value of [Open Application](#Open%20Application).\n\nThis keyword returns the index of the previous active application, which can be used to switch back to that application later.\n\nExample:\n\n```\n${appium1}=  Open Application  http://localhost:4723/wd/hub  alias=MyApp1  platformName=iOS  platformVersion=7.0  deviceName='iPhone Simulator'  app=your.app\n${appium2}=  Open Application  http://localhost:4755/wd/hub  alias=MyApp2  platformName=iOS  platformVersion=7.0  deviceName='iPhone Simulator'  app=your.app\nClick Element  sendHello  # Executed on appium running at localhost:4755          \nSwitch Application  ${appium1}  # Switch using index          \nClick Element  ackHello  # Executed on appium running at localhost:4723          \nSwitch Application  MyApp2  # Switch using alias          \nPage Should Contain Text  ackHello Received  # Executed on appium running at localhost:4755          \n```"},{"name":"Switch To Context","args":["context_name"],"doc":"Switch to a new context"},{"name":"Tap","args":["locator","x_offset=None","y_offset=None","count=1"],"doc":"Tap element identified by `locator`.\n\nArgs:\n\n*   `x_offset` - (optional) x coordinate to tap, relative to the top left corner of the element.\n*   `y_offset` - (optional) y coordinate. If y is used, x must also be set, and vice versa\n*   `count` - can be used for multiple times of tap on that element"},{"name":"Text Should Be Visible","args":["text","exact_match=False","loglevel=INFO"],"doc":"Verifies that element identified with text is visible.\n\nNew in AppiumLibrary 1.4.5"},{"name":"Toggle Touch Id Enrollment","args":[],"doc":"Toggle Touch ID enrolled state on iOS Simulator\n\nNew in AppiumLibrary 1.5"},{"name":"Touch Id","args":["match=True"],"doc":"Simulate Touch ID on iOS Simulator\n\nmatch (boolean) whether the simulated fingerprint is valid (default true)\n\nNew in AppiumLibrary 1.5"},{"name":"Wait Activity","args":["activity","timeout","interval=1"],"doc":"Wait for an activity: block until target activity presents or time out.\n\nAndroid only.\n\n*   _activity_ - target activity\n*   _timeout_ - max wait time, in seconds\n*   _interval_ - sleep interval between retries, in seconds"},{"name":"Wait Until Element Is Visible","args":["locator","timeout=None","error=None"],"doc":"Waits until element specified with locator is visible.\n\nFails if timeout expires before the element is visible. See [introduction](#Introduction) for more information about timeout and its default value.\n\nerror can be used to override the default error message.\n\nSee also [Wait Until Page Contains](#Wait%20Until%20Page%20Contains), [Wait Until Page Contains Element](#Wait%20Until%20Page%20Contains%20Element), Wait For Condition and BuiltIn keyword Wait Until Keyword Succeeds."},{"name":"Wait Until Page Contains","args":["text","timeout=None","error=None"],"doc":"Waits until text appears on current page.\n\nFails if timeout expires before the text appears. See [introduction](#Introduction) for more information about timeout and its default value.\n\nerror can be used to override the default error message.\n\nSee also [Wait Until Page Does Not Contain](#Wait%20Until%20Page%20Does%20Not%20Contain), [Wait Until Page Contains Element](#Wait%20Until%20Page%20Contains%20Element), [Wait Until Page Does Not Contain Element](#Wait%20Until%20Page%20Does%20Not%20Contain%20Element) and BuiltIn keyword Wait Until Keyword Succeeds."},{"name":"Wait Until Page Contains Element","args":["locator","timeout=None","error=None"],"doc":"Waits until element specified with locator appears on current page.\n\nFails if timeout expires before the element appears. See [introduction](#Introduction) for more information about timeout and its default value.\n\nerror can be used to override the default error message.\n\nSee also [Wait Until Page Contains](#Wait%20Until%20Page%20Contains), [Wait Until Page Does Not Contain](#Wait%20Until%20Page%20Does%20Not%20Contain) [Wait Until Page Does Not Contain Element](#Wait%20Until%20Page%20Does%20Not%20Contain%20Element) and BuiltIn keyword Wait Until Keyword Succeeds."},{"name":"Wait Until Page Does Not Contain","args":["text","timeout=None","error=None"],"doc":"Waits until text disappears from current page.\n\nFails if timeout expires before the text disappears. See [introduction](#Introduction) for more information about timeout and its default value.\n\nerror can be used to override the default error message.\n\nSee also [Wait Until Page Contains](#Wait%20Until%20Page%20Contains), [Wait Until Page Contains Element](#Wait%20Until%20Page%20Contains%20Element), [Wait Until Page Does Not Contain Element](#Wait%20Until%20Page%20Does%20Not%20Contain%20Element) and BuiltIn keyword Wait Until Keyword Succeeds."},{"name":"Wait Until Page Does Not Contain Element","args":["locator","timeout=None","error=None"],"doc":"Waits until element specified with locator disappears from current page.\n\nFails if timeout expires before the element disappears. See [introduction](#Introduction) for more information about timeout and its default value.\n\nerror can be used to override the default error message.\n\nSee also [Wait Until Page Contains](#Wait%20Until%20Page%20Contains), [Wait Until Page Does Not Contain](#Wait%20Until%20Page%20Does%20Not%20Contain), [Wait Until Page Contains Element](#Wait%20Until%20Page%20Contains%20Element) and BuiltIn keyword Wait Until Keyword Succeeds."},{"name":"Xpath Should Match X Times","args":["xpath","count","error=None","loglevel=INFO"],"doc":"Verifies that the page contains the given number of elements located by the given `xpath`.\n\nOne should not use the xpath= prefix for 'xpath'. XPath is assumed.\n\n```\nCorrect:    \nXpath Should Match X Times  //android.view.View[@text='Test']  1\nIncorrect:    \nXpath Should Match X Times  xpath=//android.view.View[@text='Test']  1\n```\n\n`error` can be used to override the default error message.\n\nSee [Log Source](#Log%20Source) for explanation about `loglevel` argument.\n\nNew in AppiumLibrary 1.4."},{"name":"Zoom","args":["locator","percent=200%","steps=1"],"doc":"Zooms in on an element a certain amount."}]}