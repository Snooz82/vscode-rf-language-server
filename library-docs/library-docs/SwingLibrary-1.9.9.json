{"name":"SwingLibrary","version":"1.9.9","keywords":[{"name":"Add Table Cell Selection","args":["identifier","row","cellIdentifier"],"doc":"Selects a cell in a table and adds it to the selection. Does not clear earlier selections.\n\nExamples:\n\n```\nSelect Table Cell  myTable  0  2  # Selects cell from first row and third column\nSelect Table Cell  myTable  1  Keyword  # Selects cell from second row and column with header 'Keyword'\n```"},{"name":"All Checkboxes Should Be Checked","args":[],"doc":"Fails if any checkbox in current context is not checked.\n\nExample:\n\n```\nSelect Context  My Checkbox Panel\nAll Checkboxes Should Be Checked  \n```"},{"name":"All Checkboxes Should Be Unchecked","args":[],"doc":"Fails if any checkbox in current context is checked.\n\nExample:\n\n```\nSelect Context  My Checkbox Panel\nAll Checkboxes Should Be Unchecked  \n```"},{"name":"Button Should Be Disabled","args":["identifier"],"doc":"Fails if button is enabled.\n\nExample:\n\n```\nButton Should Be Disabled  OK\n```"},{"name":"Button Should Be Enabled","args":["identifier"],"doc":"Fails if button is disabled.\n\nExample:\n\n```\nButton Should Be Enabled  OK\n```"},{"name":"Button Should Exist","args":["identifier"],"doc":"Fails if button does not exist within current context.\n\nExample:\n\n```\nButton Should Exist  OK\n```"},{"name":"Button Should Not Exist","args":["identifier"],"doc":"Fails if button exists within current context. You might want to set the waiting timeout with the keyword [Set Jemmy Timeout](#Set%20Jemmy%20Timeout).\n\nExample:\n\n```\nSet Jemmy Timeouts  1\nButton Should Not Exist  OK\n```"},{"name":"Call Component Method","args":["identifier","method","*args"],"doc":"Calls a method from specified component.\n\nArguments are automatically converted if possible to type expected by the method.\n\nExample:\n\n```\nCall Component Method  buttonId  setToolTipText  new tooltip text\n```"},{"name":"Cancel File Chooser","args":[],"doc":"Cancels and closes file chooser. Expects the file chooser to be open.\n\nExample:\n\n```\nPush Button  Open File\nCancel File Chooser  \n```"},{"name":"Check All Checkboxes","args":[],"doc":"Checks all checkboxes in current context.\n\nExample:\n\n```\nSelect Context  My Checkbox Panel\nCheck All Checkboxes  \n```"},{"name":"Check Box Should Be Checked","args":["identifier"],"doc":"Fails if checkbox is not checked.\n\nExample:\n\n```\nCheck Box Should Be Checked  My Checkbox\n```"},{"name":"Check Box Should Be Disabled","args":["identifier"],"doc":"Fails if checkbox is enabled.\n\nExample:\n\n```\nCheck Box Should Be Disabled  My Checkbox\n```"},{"name":"Check Box Should Be Enabled","args":["identifier"],"doc":"Fails if checkbox is disabled.\n\nExample:\n\n```\nCheck Box Should Be Enabled  My Checkbox\n```"},{"name":"Check Box Should Be Unchecked","args":["identifier"],"doc":"Fails if checkbox is checked.\n\nExample:\n\n```\nCheck Box Should Be Unchecked  My Checkbox\n```"},{"name":"Check Box Should Not Be Checked","args":["identifier"],"doc":"Alias for [Check Box Should Be Unchecked](#Check%20Box%20Should%20Be%20Unchecked) keyword."},{"name":"Check Check Box","args":["identifier"],"doc":"Uses current context to search for a checkbox and when found, checks it.\n\nExample:\n\n```\nCheck Check Box  My Checkbox\n```"},{"name":"Choose From File Chooser","args":["fileName="],"doc":"Chooses from a filechooser by pushing the approve button. An optional file name can be provided, which is inserted to the file name textfield. Expects the file chooser to be open.\n\nExample:\n\n```\nPush Button  Open File\nChoose From File Chooser  /tmp/elements.xml\n```"},{"name":"Clear Selection From List","args":["identifier"],"doc":"Clears selection from list.\n\nExample:\n\n```\nClear Selection From List  myList\n```"},{"name":"Clear Table Cell","args":["identifier","row","columnIdentifier"],"doc":"Clears table cell contents.\n\nExample:\n\n```\nClear Table Cell  myTable  1  2\n```"},{"name":"Clear Table Selection","args":["identifier"],"doc":"Clears selection from a table.\n\nExample:\n\n```\nClear Table Selection  myTable\n```"},{"name":"Clear Text Field","args":["identifier"],"doc":"Clears contents of text component (e.g. text field, password field, text area).\n\nSee [Locating components](#Locating%20components) for details.\n\nExamples:\n\n```\nClear Textfield  nameTextField\nClear Textfield  awt=streetaddress\n```"},{"name":"Clear Tree Selection","args":["identifier"],"doc":"Clears selections from a tree.\n\nExample:\n\n```\nClear Tree Selection  myTree\n```"},{"name":"Click Hyper Link","args":["identifier","linkText"],"doc":"Clicks on a hyperlink in a JEditorPane. Fails if the link is not found.\n\nExample:\n\n```\nClick Hyperlink  myEditor  Network Elements\n```"},{"name":"Click On Component","args":["identifier","clickCountString=1","buttonString=BUTTON1_MASK","*keyModifierStrings"],"doc":"Clicks on a component, optionally using click count, a specific mouse button and keyboard modifiers.\n\nThe codes used for mouse button and key modifiers are the field names from `java.awt.event.InputEvent`. For example: `BUTTON1_MASK`, `CTRL_MASK`, `ALT_MASK`, `ALT_GRAPH_MASK`, `SHIFT_MASK`, and `META_MASK`.\n\n**Note:** Some keys have more convinient case insensitive aliases that can be used: `LEFT BUTTON`, `RIGHT BUTTON`, `SHIFT`, `CTRL`, `ALT`, `META`\n\nExamples:\n\n```\nClick On Component  myComponent  # Double clicks with mouse button 2 on the component ...    \n...  2  RIGHT BUTTON  ALT  # ... while holding down the ALT key\n```"},{"name":"Click On List Item","args":["identifier","listItemIdentifier","clickCount=1"],"doc":"Clicks on a list item.\n\nExamples:\n\n```\nClick On List Item  myList  myItem\nClick On List Item  myList  0\n```\n\nAn optional click count parameter can be provided for example if a double click is required. Default click count is one:\n\n```\nClick On List Item  myList  myItem  2  # doubleclicks on item\n```"},{"name":"Click On Table Cell","args":["identifier","row","column","clickCountString=1","buttonString=BUTTON1_MASK","*keyModifierStrings"],"doc":"Clicks on a cell in a table, optionally using click count, a specific mouse button and keyboard modifiers.\n\nThe codes used for mouse button and key modifiers are the field names from `java.awt.event.InputEvent`. For example: `BUTTON1_MASK`, `CTRL_MASK`, `ALT_MASK`, `ALT_GRAPH_MASK`, `SHIFT_MASK`, and `META_MASK`.\n\n**Note:** Some keys have more convinient case insensitive aliases that can be used: `LEFT BUTTON`, `RIGHT BUTTON`, `SHIFT`, `CTRL`, `ALT`, `META`\n\nExamples:\n\n```\nClick On Table Cell  myTable  0  2  # Double clicks with mouse button 2 on the cell in the first row and third column...  \n...  2  RIGHT BUTTON  ALT  # ... while holding down the ALT key  \nClick On Table Cell  myTable  1  Header  # Single click on the cell in the second row and column with header 'Header'...  \n...  1  BUTTON1_MASK  CTRL_MASK  SHIFT_MASK  # ... while holding down the CTRL and SHIFT keys\n```"},{"name":"Click On Tree Node","args":["identifier","nodeIdentifier","clickCount=1"],"doc":"Clicks on a tree node.\n\nExamples:\n\n```\nClick On Tree Node  myTree  Root|Folder\nClick On Tree Node  myTree  0\n```\n\nAn optional `clickCount` parameter can be provided for example if a double click is required. Default click count is one:\n\n```\nClick On Tree Node  myTree  Root|Folder  2  # doubleclicks on node\n```"},{"name":"Click Table Header","args":["identifier","columnIdentifier"],"doc":"Clicks on table header of the given column.\n\nColumn can be identified either by index or by column title. Indexes start at 0.\n\nExamples:\n\n```\nClick Table Header  myTable  2  # Click the third column\nClick Table Header  myTable  amount  # Click the column that has title 'amount'\n```"},{"name":"Close All Dialogs","args":[],"doc":"Closes all the dialogs that are open."},{"name":"Close Dialog","args":["identifier"],"doc":"Closes a dialog.\n\n**N.B.** Regular expression can be used to close the dialog by prefixing the identifier with `regexp=`. See more details in [Regular expressions](#Regular%20expressions) section.\n\nExamples:\n\n```\nClose Dialog  About  \nClose Dialog  regexp=^A.*  Closes a dialog starting with 'A'\n```"},{"name":"Close Internal Frame","args":["identifier"],"doc":"Closes internal frame.\n\nExample:\n\n```\nClose Internal Frame  My Internal Frame\n```"},{"name":"Close Window","args":["identifier"],"doc":"Closes a window.\n\n**N.B.** Regular expression can be used to close the window by prefixing the identifier with `regexp=`. See more details in [Regular expressions](#Regular%20expressions) section.\n\nExamples:\n\n```\nClose Window  Help  \nClose Window  regexp=^H.*  Closes a window starting with letter H.\n```"},{"name":"Collapse All Tree Nodes","args":["identifier"],"doc":"Collapses all nodes in a tree.\n\nExample:\n\n```\nCollapse All Tree Nodes  myTree\n```"},{"name":"Collapse Tree Node","args":["identifier","nodeIdentifier"],"doc":"Collapses a node in a tree.\n\nSee [Expand Tree Node](#Expand%20Tree%20Node) for information about `nodeIdentifier`.\n\nExamples:\n\n```\nCollapse Tree Node  myTree  Root|Folder\nCollapse Tree Node  myTree  3\n```"},{"name":"Combo Box Should Be Disabled","args":["identifier"],"doc":"Fails if combobox is enabled.\n\nExample:\n\n```\nCombo Box Should Be Disabled  OK\n```"},{"name":"Combo Box Should Be Enabled","args":["identifier"],"doc":"Fails if combobox is disabled.\n\nExample:\n\n```\nCombo Box Should Be Enabled  OK\n```"},{"name":"Component Should Be Visible","args":["identifier"],"doc":"Checks that component is visible. Even if one pixel of the component is visible, this keyword will pass.\n\nExample:\n\n```\nComponent Should Be Visible  myComponent\n```"},{"name":"Component Should Exist","args":["identifier"],"doc":"Fails if component does not exist within current context. You might want to set the waiting timeout with the keyword [Set Jemmy Timeout](#Set%20Jemmy%20Timeout)\n\nExample:\n\n```\nComponent Should Not Exist  myPanel\n```"},{"name":"Component Should Not Be Visible","args":["identifier"],"doc":"Checks that component is not visible. Fails if even one pixel of the component is visible.\n\nExample:\n\n```\nComponent Should Not Be Visible  myComponent\n```"},{"name":"Component Should Not Exist","args":["identifier"],"doc":"Fails if component exists within current context. You might want to set the waiting timeout with the keyword [Set Jemmy Timeout](#Set%20Jemmy%20Timeout)\n\nExample:\n\n```\nComponent Should Not Exist  myPanel\n```"},{"name":"De Iconify Internal Frame","args":["identifier"],"doc":"De-iconifies internal frame.\n\nExample:\n\n```\nClose Internal Frame  My Internal Frame\n```"},{"name":"Decrease Spinner Value","args":["identifier","times=1"],"doc":"Scrolls spinner button down. The number of notches to scroll can be given as a second argument.\n\nExamples:\n\n```\nDecrease Spinner Value  mySpinner    # scrolls spinner button down a notch\nDecrease Spinner Value  mySpinner  4  # scrolls spinner button down four notches\n```"},{"name":"Dialog Should Be Open","args":["identifier"],"doc":"Fails if the dialog is not open.\n\nExample:\n\n```\nDialog Should Be Open  About\n```"},{"name":"Dialog Should Not Be Open","args":["identifier"],"doc":"Fails if the dialog is open. You might want to set the waiting timeout with the keyword [Set Jemmy Timeout](#Set%20Jemmy%20Timeout).\n\nExample:\n\n```\nSet Jemmy Timeouts  2\nDialog Should Not Be Open  About\n```"},{"name":"Expand All Tree Nodes","args":["identifier"],"doc":"Expands all nodes in a tree.\n\nExample:\n\n```\nExpand All Tree Nodes  myTree\n```"},{"name":"Expand Tree Node","args":["identifier","nodeIdentifier"],"doc":"Expands a node in a tree.\n\nArgument `nodeIdentifier` can be either tree path (i.e visible labels of nodes to be expanded), or index of the expanded node element. Nested structures can only be expanded using the tree path syntax.\n\nExamples:\n\n```\nExpand Tree Node  myTree  Root|Folder\nExpand Tree Node  myTree  3\n```"},{"name":"Find Table Row","args":["identifier","text","columnIdentifier="],"doc":"Finds the first row index that has a cell that contains the given text. This is useful when we want to operate on cells which location can change.\n\nExamples:\n\n```\n${row}=  Find Table Row  myTable  Some Value    \nSelect From Table Cell Popup Menu  myTable  ${row}  2  Activate  \n${row}=  Find Table Row  myTable  Some Value  Some Column  # Searches the 'Some Value' from the specified 'Some Column'\n```"},{"name":"Focus To Component","args":["identifier"],"doc":"Sets focus to the component. Useful for example when sending keyboard events to a component.\n\nExample:\n\n```\nFocus To Component  myTextField    \nSend Keyboard Event  VK_C  CTRL_MASK  # paste from clipboard\n```"},{"name":"Get Button Text","args":["identifier"],"doc":"Uses current context to search for a button and when found, returns the text it is labeled with.\n\nExample:\n\n```\n${buttonText}=  Get Button Text  myButton\nShould Be Equal  My Button  ${buttonText}\n```"},{"name":"Get Combobox Values","args":["identifier"],"doc":"Returns a list containing all the values of a combobox.\n\n**N.B** This keyword will return the values contained by `javax.swing.ComboBoxModel`, this is not necessarily what is displayed on the GUI.\n\nExample:\n\n```\n${comboboxValues}=  Get Combobox Values  myCombobox\nShould Contain  ${expectedValue}  ${comboboxValues}\n```"},{"name":"Get Current Context","args":[],"doc":"Returns the component name in current context or title if window or dialog is selected.\n\nExample:\n\n```\n${context}=  Get Current Context  # Sets the identifier of the current context to a variable\n```"},{"name":"Get Internal Frames In Context","args":[],"doc":"Returns all frames that are open in the current context.\n\nReturns empty list if the context is not selected.\n\nExample:\n\n```\nSelect Main Window    \n${frames}=  Get Internal Frames In Context  \nShould Contain  ${frames}  Test Internal Frame\n```"},{"name":"Get Label Content","args":["identifier"],"doc":"Returns the text displayed on a label. Assumes that the label exists in the current context.\n\nExample:\n\n```\n${labelText}=  Get Label Content  addressLabel\nShould Be Equal  Address:  ${labelText}\n```"},{"name":"Get List Item Count","args":["identifier"],"doc":"Returns the number of items contained in list.\n\nExample:\n\n```\n${listItemCount}=  Get List Item Count  myList\nShould Be Equal As Integers  2  ${listItemCount}\n```"},{"name":"Get List Values","args":["identifier"],"doc":"Returns all values from a list.\n\nExample:\n\n```\n${values}=  Get List Values  myList\nShould Be Equal  ${values}  one, two, three\n```"},{"name":"Get Main Menu Item Name","args":["index"],"doc":"Selects an item from the menu of the window that was opened first and returns it's name.\n\nExample:\n\n```\n${mainMenuItemName}=  Get Main Menu Item Name  0\nShould Be Equal  File  ${mainMenuItemName}\n```"},{"name":"Get Main Menu Item Names","args":[],"doc":"Selects all items from the menu of the window that was opened first and returns their names.\n\nExample:\n\n```\n@{mainMenuItemNames}=  Get Main Menu Item Names  \nShould Contain  @{mainMenuItemNames}  File\n```"},{"name":"Get Menu Item Names","args":["menuPath"],"doc":"Gets names of menu items.\n\nReturns empty list if menu item has no children.\n\nExamples:\n\n```\n@{menus}  Get Menu Item Names  Tools|Testing\nShould Contain  ${menus}  Test Tool\n@{empty}  Get Menu Item Names  Tools|empty\nShould Be Empty  ${empty}  \n```"},{"name":"Get Menu Items From Popup Menu","args":["identifier","menuPath"],"doc":"Gets item names from the components context popup menu. Does a right click on the component and retrieves the specified menu items from the popup menu.\n\nExample:\n\n```\n@{items}=  Get Menu Items From Popup Menu  myComponent  Actions\nShould Contain  ${items}  Do something  \n```"},{"name":"Get Node Items From Tree Popup Menu","args":["identifier","nodeIdentifier","menuPath"],"doc":"Gets item names from the node context popup menu. Clears earlier selections. If several nodes have the same path then **only the first** menu item names of those nodes are returned.\n\nExample:\n\n```\n@{items}=  Get Node Items From Tree Popup Menu  myTree  Root|Folder  Actions\nShould Contain  ${items}  Do something    \n```"},{"name":"Get Selected Item From Combo Box","args":["identifier"],"doc":"Returns an item from a combobox.\n\nExample:\n\n```\n${selectedItem}=  Get Selected Item From Combobox  myComboBox\nShould Be Equal  item three  ${selectedItem}\n```"},{"name":"Get Selected Item From Dropdown Menu","args":["identifier"],"doc":"Alias for [Get Selected Item From Combobox](#Get%20Selected%20Item%20From%20Combo%20Box) keyword."},{"name":"Get Selected Tab Label","args":[],"doc":"Returns the label of the tab that is currenctly selected. Expects that only one tab pane exists in the current context. If you need to operate on a different tab pane use [Select Tab Pane](#Select%20Tab%20Pane) keyword first.\n\nExample:\n\n```\n${currentTab}=  Get Selected Tab Label  \nShould Be Equal  Customer Information  ${currentTab}\n```"},{"name":"Get Selected Table Cell Value","args":["identifier","source=auto"],"doc":"Returns selected cell's value from a table.\n\nOptional parameter `source` allows to override text extraction strategy. Available values are `auto` (default, will try to get text from cell component first and then from table model) and `model` (will only try to get text from table model).\n\nExample:\n\n```\n${cellValue}=  Get Selected Table Cell Value  myTable\nShould Be Equal  tuesday  ${cellValue}\n```"},{"name":"Get Selected Value From List","args":["identifier"],"doc":"Returns the item that's currently selected in the list.\n\nExample:\n\n```\n${listItem}=  Get Selected Value From List  myList\nShould Be Equal  Expected Item  ${listItem}\n```"},{"name":"Get Selected Window Title","args":[],"doc":"Returns the title of the selected window. Assumes current context is window.\n\nExample:\n\n```\n${title}=  Get Selected Window Title  \nShould Be Equal  Help Contents  ${title}\n```"},{"name":"Get Slider Value","args":["identifier"],"doc":"Uses current context to search for a slider and when found, returns its current value.\n\nExample:\n\n```\n${sliderValue}=  Get Slider Value  mySlider\nShould Be Equal As Integers  12  ${sliderValue}\n```"},{"name":"Get Spinner Value","args":["identifier"],"doc":"Uses current context to search for a spinner button and when found, returns its current value.\n\nExample:\n\n```\n${spinnerValue}=  Get Spinner Value  mySpinner\nShould Be Equal As Integers  12  ${spinnerValue}\n```"},{"name":"Get Table Cell Property","args":["identifier","row","columnIdentifier","propertyName"],"doc":"Returns the property of the table cell.\n\nExample:\n\n```\n${background}=  Get Table Cell Property  myTable  1  2  background\nShould Be Equal As Integers  255  ${background.getRed()}      \n```"},{"name":"Get Table Cell Value","args":["identifier","row","columnIdentifier","source=auto"],"doc":"Returns cell's value from a table.\n\nThe value from cell rendered with check box is a true/false string. Optional parameter `source` allows to override text extraction strategy. Available values are `auto` (default, will try to get text from cell component first and then from table model) and `model` (will only try to get text from table model).\n\nExample:\n\n```\n${cellValue}=  Get Table Cell Value  myTable  0  2\nShould Be Equal  tuesday    ${cellValue}  \n```"},{"name":"Get Table Column Count","args":["identifier"],"doc":"Returns the number of columns from a table.\n\nExample:\n\n```\n${columnCount}=  Get Table Column Count  myTable\nShould Be Equal As Integers  4  ${columnCount}\n```"},{"name":"Get Table Column Values","args":["identifier","columnIdentifier"],"doc":"Returns a list containing all the values of a table column.\n\nExample:\n\n```\n${columnValues}=  Get Table Column Values  myTable  columnTwo\nShould Contain  ${expectedValue}  ${columnValues}  \n```"},{"name":"Get Table Headers","args":["identifier"],"doc":"Returns table's header names.\n\nExample:\n\n```\n@{headers}=  Get Table Headers  myTable\n```"},{"name":"Get Table Row Count","args":["identifier"],"doc":"Returns the number of rows from a table.\n\nExample:\n\n```\n${rowCount}=  Get Table Row Count  myTable\nShould Be Equal As Integers  4  ${rowCount}\n```"},{"name":"Get Table Row Values","args":["identifier","row"],"doc":"Returns a list containing all the values of a table row.\n\nExample:\n\n```\n${rowValues}=  Get Table Row Values  myTable  2\nShould Contain  ${expectedValue}  ${rowValues}  \n```"},{"name":"Get Table Values","args":["identifier"],"doc":"Returns a list of table rows containing all the values of a table.\n\nExample:\n\n```\n${tableValues}=  Get Table Values  myTable  rowThree\nShould Be Equal  ${expectedValue}  ${tableValues[1][2]}  \n```"},{"name":"Get Text Field Value","args":["identifier"],"doc":"Returns the value of a text component (e.g. text field, password field, text area).\n\nSee [Locating components](#Locating%20components) for details.\n\nExample:\n\n```\n${textFieldValue}=  Get Textfield Value  nameTextField\nShould Be Equal  John Doe  ${textFieldValue}\n```"},{"name":"Get Tooltip Text","args":["identifier"],"doc":"Returns the component's tooltip text.\n\nExample:\n\n```\n${tooltip}=  Get Tooltip Text  saveButton\nShould Be Equal  Save  ${tooltip}\n```"},{"name":"Get Tree Node Child Names","args":["identifier","nodeIdentifier"],"doc":"Returns a list with all the child node names of the specified node.\n\nExample:\n\n```\n${expectedElements}=  Create List  someElement  otherElement\n${actualElements}=  Get Tree Node Child Names  myTree  Element Folder\nLists Should Be Equal  ${expectedElements}  ${actualElements}  # This keyword comes from Collections library\n```"},{"name":"Get Tree Node Count","args":["identifier"],"doc":"Returns the count of all visible nodes.\n\nExample:\n\n```\n${nodeCount}=  Get Tree Node Count  myTree\nShould Be Equal As Integers  3  ${nodeCount}\n```"},{"name":"Get Tree Node Index","args":["identifier","nodePath"],"doc":"Returns the node index. Argument `nodePath` must be a string of form `path|to|node`.\n\nExample:\n\n```\n${nodeIndex}=  Get Tree Node Index  myTree  Root|Folder|ElementX\nShould Be Equal As Integers  4  ${nodeIndex}  \n```"},{"name":"Get Tree Node Label","args":["identifier","nodeIndex"],"doc":"Returns the node name. Argument `nodeIndex` must be a number and it is counted from visible nodes (index starts from 0).\n\nExample:\n\n```\n${nodeLabel}=  Get Tree Node Label  myTree  3\nShould Be Equal  Element1  ${nodeLabel}  \n```"},{"name":"Get Window Size","args":["identifier"],"doc":"Returns a list containing the width and the height of the window.\n\nExamples:\n\n```\n${size}  Get Window Size  Help  # Gets the size of the Help window.\nShould Be Equal As Integers  ${size[0]}  800  \nShould Be Equal As Integers  ${size[1]}  600  \n```"},{"name":"Iconify Internal Frame","args":["identifier"],"doc":"Iconifies internal frame.\n\nExample:\n\n```\nClose Internal Frame  My Internal Frame\n```"},{"name":"Increase Spinner Value","args":["identifier","times=1"],"doc":"Scrolls spinner button up. The number of notches to scroll can be given as a second argument.\n\nExamples:\n\n```\nIncrease Spinner Value  mySpinner    # scrolls spinner button up a notch\nIncrease Spinner Value  mySpinner  4  # scrolls spinner button up four notches\n```"},{"name":"Insert Into Text Field","args":["identifier","text"],"doc":"Inserts text into a text component (e.g. text field, password field, text area).\n\nSee [Locating components](#Locating%20components) for details.\n\nExamples:\n\n```\nInsert Into Textfield  nameTextField  John Doe\nInsert Into Textfield  awt=streetaddress  Karaportti 3\n```"},{"name":"Internal Frame Should Be Open","args":["identifier"],"doc":"Fails if the internal frame is **not** open.\n\nExample:\n\n```\nInternal Frame Should Be Open  My Internal Frame\n```"},{"name":"Internal Frame Should Exist","args":["identifier"],"doc":"Fails if the internal frame doesn't exist in the current context.\n\nExample:\n\n```\nInternal Frame Should Exist  My Internal Frame\n```"},{"name":"Internal Frame Should Not Be Open","args":["identifier"],"doc":"Fails if the internal frame **is** open.\n\nExample:\n\n```\nInternal Frame Should Not Be Open  My Internal Frame\n```"},{"name":"Internal Frame Should Not Exist","args":["identifier"],"doc":"Fails if the internal frame exists in the current context.\n\nExample:\n\n```\nInternal Frame Should Not Exist  My Internal Frame\n```"},{"name":"Label Should Exist","args":["identifier"],"doc":"Fails if label does not exist within current context.\n\nExample:\n\n```\nLabel Should Exist  myLabel\n```"},{"name":"Label Should Not Exist","args":["identifier"],"doc":"Fails if label exists within current context. You might want to set the waiting timeout with the keyword [Set Jemmy Timeout](#Set%20Jemmy%20Timeout).\n\nExample:\n\n```\nSet Jemmy Timeouts  1\nLabel Should Not Exist  myLabel\n```"},{"name":"Label Text Should Be","args":["identifier","expected"],"doc":"Checks the equality of given text and the text displayed on a label. Assumes that the label exists in the current context.\n\nExample:\n\n```\nLabel Text Should Be  addressLabel  Address:\n```"},{"name":"Launch Application","args":["className","*args"],"doc":"Launches application with the given arguments.\n\nExample:\n\n```\nLaunch Application  com.acme.myapplication.MyApp  arg1  arg2\n```"},{"name":"List Component Methods","args":["identifier"],"doc":"List methods of components object. When working with custom components you may use this keyword to discover methods you can call with [Call Component Method](#Call%20Component%20Method) keyword.\n\nExample:\n\n```\nList Component Methods  myComponent\n```"},{"name":"List Components In Context","args":["formatted="],"doc":"Prints components (their types and their internal names) from the selected context.\n\nBy default returns the component names without formatting used in the printout. If given an argument, the return value will have the same formatting as the printout. The internal name is set with component's `setName` method: [https://docs.oracle.com/javase/7/docs/api/java/awt/Component.html#setName(java.lang.String](https://docs.oracle.com/javase/7/docs/api/java/awt/Component.html#setName(java.lang.String)). See keywords, [Select Window](#Select%20Window), [Select Dialog](#Select%20Dialog) and [Select Context](#Select%20Context) for details about context.\n\nExamples:\n\n```\nSelect Main Window  \nList Components In Context  \nList Components In Context  formatted\n```"},{"name":"List Should Contain","args":["identifier","value"],"doc":"Fails if value not in list.\n\nExample:\n\n```\nList Should Contain  myList  item\n```"},{"name":"List Should Not Contain","args":["identifier","value"],"doc":"Fails if value is in list.\n\nExample:\n\n```\nList Should Not Contain  myList  item\n```"},{"name":"List Windows","args":[],"doc":"Gets list of open window titles.\n\nLogs the window titles and names in parenthesis.\n\nExample:\n\n```\nList Windows\n```"},{"name":"Main Menu Item Should Be Checked","args":["menuPath"],"doc":"Fails if checkbox menu item is not checked in the opened window that was opened first.\n\nExample:\n\n```\nMain Menu Item Should Be Checked  Tools|My Checkbox\n```"},{"name":"Main Menu Item Should Exist","args":["menuPath"],"doc":"Fails if menu item doesn't exist in the window that was opened first. Shortcut for:\n\n```\nSelect Window  0\nMenu Item Should Exist  Tools|Testing|MyTestTool\n```\n\nExample:\n\n```\nMain Menu Item Should Exist  Tools|Testing|Test Tool\n```"},{"name":"Main Menu Item Should Not Be Checked","args":["menuPath"],"doc":"Fails if checkbox menu item is checked in the opened window that was opened first.\n\nExample:\n\n```\nMain Menu Item Should Not Be Checked  Tools|My Checkbox\n```"},{"name":"Main Menu Item Should Not Exist","args":["menuPath"],"doc":"Fails if menu item exists in the window that was opened first. Shortcut for:\n\n```\nSelect Window  0\nMenu Item Should Not Exist  Tools|Testing|MyTestTool\n```\n\nExample:\n\n```\nMain Menu Item Should Not Exist  Tools|Testing|Test Tool\n```"},{"name":"Maximize Internal Frame","args":["identifier"],"doc":"Maximizes internal frame.\n\nExample:\n\n```\nMaximize Internal Frame  My Internal Frame\n```"},{"name":"Menu Item Should Be Checked","args":["menuPath"],"doc":"Searches for an checkbox menu item from the menu of the currently selected window and fails if it is not checked.\n\nExample:\n\n```\nMenu Item Should Be Checked  Tools|My Checkbox\n```"},{"name":"Menu Item Should Be Disabled","args":["menuPath"],"doc":"Alias for [Menu Item Should Not Be Enabled](#Menu%20Item%20Should%20Not%20Be%20Enabled)"},{"name":"Menu Item Should Be Enabled","args":["menuPath"],"doc":"Searches for an menu item from the menu of the currently selected window and fails if it is disabled.\n\nExample:\n\n```\nSelect Window  My Application\nMenu Item Should Be Enabled  Tools|Testing|MyTestTool\n```"},{"name":"Menu Item Should Exist","args":["menuPath"],"doc":"Fails if menu item doesn't exist.\n\nExample:\n\n```\nMenu Item Should Exist  Tools|Testing|Test Tool\n```"},{"name":"Menu Item Should Not Be Checked","args":["menuPath"],"doc":"Searches for an checkbox menu item from the menu of the currently selected window and fails if it is checked.\n\nExample:\n\n```\nMenu Item Should Not Be Checked  Tools|My Checkbox\n```"},{"name":"Menu Item Should Not Be Enabled","args":["menuPath"],"doc":"Searches for an menu item from the menu of the currently selected window and fails if it is enabled.\n\nExample:\n\n```\nSelect Window  My Application\nMenu Item Should Not Be Enabled  Tools|Testing|MyTestTool\n```"},{"name":"Menu Item Should Not Exist","args":["menuPath"],"doc":"Fails if menu item exists.\n\nExample:\n\n```\nMenu Item Should Not Exist  Tools|Testing|Test Tool\n```"},{"name":"Minimize Internal Frame","args":["identifier"],"doc":"Minimizes internal.\n\nExample:\n\n```\nMinimize Internal Frame  My Internal Frame\n```"},{"name":"Push Button","args":["identifier"],"doc":"Uses current context to search for a button and when found, pushes it.\n\nExample:\n\n```\nPush Button  OK\n```"},{"name":"Push Radio Button","args":["identifier"],"doc":"Uses current context to search for a radiobutton and when found, pushes it.\n\nExample:\n\n```\nSelect Radio Button  My Radio Button\n```"},{"name":"Push Toggle Button","args":["identifier"],"doc":"Uses current context to search for a button and when found, pushes it.\n\nExample:\n\n```\nPush Toggle Button  Activated\n```"},{"name":"Radio Button Should Be Disabled","args":["identifier"],"doc":"Fails if radio button is enabled.\n\nExample:\n\n```\nRadio Button Should Be Disabled  My Radio Button\n```"},{"name":"Radio Button Should Be Enabled","args":["identifier"],"doc":"Fails if radio button is disabled.\n\nExample:\n\n```\nRadio Button Should Be Enabled  My Radio Button\n```"},{"name":"Radio Button Should Be Selected","args":["identifier"],"doc":"Fails if radiobutton is not selected.\n\nExample:\n\n```\nRadio Button Should Be Selected  My Radio Button\n```"},{"name":"Radio Button Should Not Be Selected","args":["identifier"],"doc":"Fails if radiobutton is selected.\n\nExample:\n\n```\nRadio Button Should Not Be Selected  My Radio Button\n```"},{"name":"Right Click On Component","args":["identifier"],"doc":"Right clicks on a component.\n\nExample:\n\n```\nRight Click On Component  myComponent\n```"},{"name":"Run Keyword In Separate Thread","args":["keywordName","*arguments"],"doc":"Executes the given keyword with the given arguments in a separate thread. Useful if the given keyword starts a process that stays running (e.g. opens a dialog) and doesn't return. Known limitations:\n\n*   The return value of the keyword being run is ignored.\n*   Exceptions thrown by the keyword are ignored, which implies that this keyword should not be used in conjunction with keywords such [Label Text Should Be](#Label%20Text%20Should%20Be) or [Menu Item Should Be Enabled](#Menu%20Item%20Should%20Be%20Enabled)."},{"name":"Scroll Component To View","args":["identifier"],"doc":"Scrolls component to view.\n\nExample:\n\n```\nScroll Component To View  myComponent\n```"},{"name":"Select All List Items","args":["identifier"],"doc":"Selects all list items.\n\nExample:\n\n```\nSelect All List Items  My List\n```"},{"name":"Select Context","args":["identifier"],"doc":"Selects a container as current context. Context has to be a window, dialog, internal frame or panel. Requires that a parent context has been selected beforehand using [Select Window](#Select%20Window) or [Select Dialog](#Select%20Dialog).\n\nExample:\n\n```\nSelect Window  Main Window  # Selects the 'parent context'\nSelect Context  myPanel  # Sets 'myPanel' as current context\n```"},{"name":"Select Dialog","args":["identifier"],"doc":"Selects a dialog as current context and sets focus to it.\n\n**N.B.** Regular expression can be used to select the dialog by prefixing the identifier with `regexp=`. See more details in [Regular expressions](#Regular%20expressions) section.\n\nExamples:\n\n```\nSelect Dialog  About  \nSelect Dialog  regexp=^A.*  Selects a dialog starting with 'A'\n```"},{"name":"Select From Combo Box","args":["identifier","comboItemIdentifier","*verifySelection"],"doc":"Selects an item from a combobox. The item selection is verified by default and can be disabled using the optional `verifySelection` parameter with any value.\n\n**N.B** If the `comboItemIdentifier` is a numerical value it vill be interpreted as index.\n\n**N.B.** If the combobox changes its items on selection, disable the verification and optionally check the selection using the keyword [Get Selected Item From Combo Box](#Get%20Selected%20Item%20From%20Combo%20Box).\n\nExamples:\n\n```\nSelect From Combo Box  myComboBox  myItem  # Selects 'myItem' from combobox  \nSelect From Combo Box  myComboBox  0  # Selects the first item from combobox  \nSelect From Combo Box  myComboBox  myItem  don't verify  # Selects 'myItem' from combobox and doesn't verify that myItem is selected\n```"},{"name":"Select From Dropdown Menu","args":["menuIdentifier","menuItemIdentifier","*verificationDisabled"],"doc":"Alias for [Select From Combobox](#Select%20From%20Combo%20Box) keyword."},{"name":"Select From List","args":["identifier","listItemIdentifier","*additionalItemIdentifiers"],"doc":"Selects an item from the list.\n\nExamples:\n\n```\nSelect From List  myList  myItem  # selects 'myItem'\nSelect From List  myList  0  # selects the first item in the list\n``````\nSelect From List  myList  myItem  2  # doubleclicks on item\n```\n\nAny number of list item identifiers can be provided to select multiple items at once:\n\n```\nSelect From List  myList  myItem  anotherItem  yetAnother\n```"},{"name":"Select From List Item Popup Menu","args":["identifier","listItemIdentifier","menuPath"],"doc":"Selects an item from a list item popup. Separator for items is `|`.\n\nExample:\n\n```\nSelect From List Item Popup Menu  myList  listItem  File|Exit\n```"},{"name":"Select From Main Menu","args":["menuPath"],"doc":"Selects an item from the menu of the window that was opened first. Shortcut for:\n\n```\nSelect Window  0\nSelect From Menu  Tools|Testing|MyTestTool\n```\n\nExample:\n\n```\nSelect From Main Menu  Tools|Testing|MyTestTool\n```"},{"name":"Select From Main Menu And Wait","args":["menuPath"],"doc":"Selects an item from the menu of the window that was opened first and waits for action to finish. Shortcut for:\n\n```\nSelect Window  0\nSelect From Menu And Wait  Tools|Testing|MyTestTool\n```\n\nThis keyword will not work, for example, if the menu item opens a dialog.\n\nExample:\n\n```\nSelect From Main Menu And Wait  Tools|Testing|MyTestTool\n```"},{"name":"Select From Menu","args":["menuPath"],"doc":"Selects an item from the menu of the currently selected window.\n\nExample:\n\n```\nSelect Window  My Application\nSelect From Menu  Tools|Testing|MyTestTool\n```"},{"name":"Select From Menu And Wait","args":["menuPath"],"doc":"Selects an item from the menu of the currently selected window and waits for action to finish. This keyword will not work, for example, if the menu item opens a dialog.\n\nExample:\n\n```\nSelect Window  My Application\nSelect From Menu And Wait  Tools|Testing|MyTestTool\n```"},{"name":"Select From Popup Menu","args":["identifier","menuPath"],"doc":"Selects an item from the components context popup menu. Does a right click on the component and selects the specified menu item from the popup menu.\n\nExample:\n\n```\nSelect From Popup Menu  myComponent  Actions  Do something\n```"},{"name":"Select From Popup Menu On Selected Tree Nodes","args":["identifier","menuPath"],"doc":"Invokes a menu action on all the selected tree nodes. Does not wait for a result. Separator for items is `|`.\n\nExamples:\n\n```\nSelect Tree Node  myTree  Root|Folder1\nSelect Tree Node  myTree  Root|Folder2\nSelect From Popup Menu On Selected Tree Nodes  myTree  Remove\n```"},{"name":"Select From Table Cell Popup Menu","args":["identifier","row","columnIdentifier","menuPath"],"doc":"Selects an item from a table cell popup. Separator for items is `|`.\n\nExample:\n\n```\nSelect From Table Cell Popup Menu  myTable  1  3  Cell Actions|Clear Cell Value\n```"},{"name":"Select From Table Cell Popup Menu On Selected Cells","args":["identifier","menuPath"],"doc":"Selects an item from a table cell popup on the table cells that are selected. Separator for items is `|`.\n\nExample:\n\n```\nSelect From Table Cell Popup Menu On Selected Cells  myTable  Cell Actions|Clear Cell Value\n```"},{"name":"Select From Tree Node Popup Menu","args":["identifier","nodeIdentifier","menuPath"],"doc":"Selects an item from the tree node's popup menu.\n\nExample:\n\n```\nSelect From Tree Node Popup Menu  myTree  Root|Folder  New Folder\n```"},{"name":"Select From Tree Node Popup Menu In Separate Thread","args":["identifier","nodeIdentifier","menuPath"],"doc":"Selects an item from the tree node's popup menu and does not wait for a result. Needed if the action starts a process that stays running (e.g. opens a dialog) and the above keyword doesn't return. Separator for items is `|`.\n\nExample:\n\n```\nSelect From Tree Node Popup Menu In Separate Thread  myTree  Root|Folder  New Folder\n```"},{"name":"Select Main Window","args":[],"doc":"Selects the window that was opened first as current context.\n\nExample:\n\n```\nSelect Main Window\n```"},{"name":"Select Radio Button","args":["identifier"],"doc":"**DEPRECATED** Use keyword [Push Radio Button](#Push%20Radio%20Button) instead."},{"name":"Select Tab","args":["tabIdentifier","tabPaneIdentifier="],"doc":"Selects a tab. The optional tab pane identifier can be provided, otherwise the first matching tab is selected.\n\n**N.B.** Regular expression can be used to select the tab pane or/and page by prefixing the identifiers with `regexp=`. See more details in [Regular expressions](#Regular%20expressions) section.\n\nExamples:\n\n```\nSelect Tab  Customer Information    \nSelect Tab  Customer Information  Customers  \nSelect Tab  regexp=^A.*  regexp=^B.*  Selects a tab page starting with 'A' from a tab pane starting with 'B'\n```"},{"name":"Select Tab As Context","args":["tabIdentifier","tabPaneIdentifier="],"doc":"Selects a tab and sets it as the context. The optional tab pane identifier can be provided, otherwise the first matching tab is selected.\n\n**N.B.** Regular expression can be used to select the tab pane or/and page by prefixing the identifiers with `regexp=`. See more details in [Regular expressions](#Regular%20expressions) section.\n\nExamples:\n\n```\nSelect Tab As Context  Customer Information    \nSelect Tab As Context  Customer Information  Customers  \nSelect Tab As Context  regexp=^A.*  regexp=^B.*  Selects a tab page starting with 'A' from a tab pane starting with 'B'\n```"},{"name":"Select Tab Pane","args":["tabPaneIdentifier"],"doc":"Sets a tab pane as the current context. Useful if you have several tab panes in the window.\n\n**N.B.** Regular expression can be used to select the tab pane by prefixing the identifiers with `regexp=`. See more details in [Regular expressions](#Regular%20expressions) section.\n\nExamples:\n\n```\nSelect Tab Pane  Other Tab Pane  \nSelect Tab Pane  Customer Information  \nSelect Tab Pane  regexp=^A.*  Selects a tab pane starting with 'A'\n```"},{"name":"Select Table Cell","args":["identifier","row","cellIdentifier"],"doc":"Selects a cell in a table.\n\nExamples:\n\n```\nSelect Table Cell  myTable  0  2  # Selects cell from first row and third column\nSelect Table Cell  myTable  1  Keyword  # Selects cell from second row and column with header 'Keyword'\n```"},{"name":"Select Table Cell Area","args":["identifier","startRow","endRow","startColumn","endColumn"],"doc":"Selects a cell area in a table. Does not clear earlier selections.\n\nExample:\n\n```\nSelect Table Cell Area  myTable  0  2  0  2  # Selects cells from first to third row and first to third column\n```"},{"name":"Select Tree Node","args":["identifier","nodeIdentifier","*additionalNodeIdentifiers"],"doc":"Sets a node as selected in a tree. Does not clear earlier selections. If several nodes have the same path then **only the first** of those nodes is selected.\n\nExample:\n\n```\nSelect Tree Node  myTree  Root|Folder\n```\n\nAny number of node identifiers can be provided to select multiple nodes at once:\n\n```\nSelect Tree Node  myTree  Root|Folder  Root|Folder2  Root|Folder3\n```"},{"name":"Select Window","args":["identifier"],"doc":"Selects a window as current context and sets focus to it.\n\n**N.B.** Regular expression can be used to select the window by prefixing the identifier with `regexp=`. See more details in [Regular expressions](#Regular%20expressions) section.\n\nExamples:\n\n```\nSelect Window  Help  \nSelect Window  regexp=^H.*  Selects a window starting with letter H.\n```"},{"name":"Send Keyboard Event","args":["keyCode","*modifiers"],"doc":"Sends keystrokes to the currently selected component. Keystroke codes must be one of the mappings in `abbot.tester.KeyStrokeMap` ([https://sourceforge.net/p/abbot/svn/1214/tree/trunk/abbot/src/abbot/tester/KeyStrokeMap.java#l110](https://sourceforge.net/p/abbot/svn/1214/tree/trunk/abbot/src/abbot/tester/KeyStrokeMap.java#l110)). Constants from `java.awt.event.InputEvent` can be used as optional modifiers.\n\nExamples with textfield:\n\n```\nFocus To Component  myTextfield  \nSend Keyboard Event  VK_S  \nSend Keyboard Event  VK_O  \nSend Keyboard Event  VK_M  \nSend Keyboard Event  VK_E  \nSend Keyboard Event  VK_T  SHIFT_MASK\nSend Keyboard Event  VK_E  \nSend Keyboard Event  VK_X  \nSend Keyboard Event  VK_T  \n${textFieldContents}=  Get Text Field Value  myTextfield\nShould Be Equal  someText  ${textFieldContents}\n```\n\nExamples with table:\n\n```\nSelectTableCell  myTable  0  0\nSend Keyboard Event  VK_TAB    \nTable Cell Should Be Selected  myTable  0  1\nSend Keyboard Event  VK_TAB  SHIFT_MASK  \nTable Cell Should Be Selected  myTable  0  0\n```"},{"name":"Set Jemmy Dispatch Model","args":["dispatch model"],"doc":"Sets the jemmy dispatching model. The event dispatching is explained in [https://jemmy.java.net/tutorial.html#robot](https://jemmy.java.net/tutorial.html#robot) Possible models are `QUEUE`, `QUEUE_SHORTCUT` (default), `ROBOT`, `ROBOT_SMOOTH`. Returns the old dispatching model.\n\nExample:\n\n```\nSet Jemmy Dispatch Model  ROBOT  \n${old model}=  Set Jemmy Dispatch Model  ROBOT_SMOOTH\n```"},{"name":"Set Jemmy Timeout","args":["timeoutName","timeout"],"doc":"Sets the jemmy timeout used for waiting a component to appear. Timeout names are listed here: [http://jemmy.java.net/OperatorsEnvironment.html#timeouts](http://jemmy.java.net/OperatorsEnvironment.html#timeouts) Returns the old timeout setting value.\n\nThis keyword by default takes timeout value is seconds, you can however suffix it with `ms` to provide it in milliseconds. Return value will always be in units you used for the argument.\n\nExample:\n\n```\nSet Jemmy Timeout  DialogWaiter.WaitDialogTimeout  3  \n${oldSetting}=  Set Jemmy Timeout  DialogWaiter.WaitDialogTimeout  3\n```"},{"name":"Set Jemmy Timeouts","args":["timeout"],"doc":"Sets all relevant jemmy timeouts. By default they are all set to 5 seconds.\n\nThis keyword by default takes timeout value is seconds, you can however suffix it with `ms` to provide it in milliseconds.\n\nList of all the timeouts this keywords sets:\n\n```\nTimeout Name  Description\nDialogWaiter.WaitDialogTimeout  Time to wait dialog displayed\nFrameWaiter.WaitFrameTimeout  Time to wait frame displayed\nWindowWaiter.WaitWindowTimeout  Time to wait window displayed\nComponentOperator.WaitComponentTimeout  Time to wait component displayed\nComponentOperator.WaitComponentEnabledTimeout  Time to wait component enabled\nComponentOperator.WaitStateTimeout  Used for example in combobox selection\nJComboboxOperator.WaitGetSelectedItemTimeout  Time to wait for combobox selected item fetching\nJComboBoxOperator.WaitListTimeout  Time to wait list opened\nJMenuOperator.WaitPopupTimeout  Time to wait popup displayed\nJTreeOperator.WaitNodeExpandedTimeout  Time to wait node expanded\nJTreeOperator.WaitNextNodeTimeout  Time to wait next node displayed\nJTreeOperator.WaitNodeVisibleTimeout  Time to wait node visible\nJListOperator.WaitFindItemIndexTimeout  Time to wait for list item to appear\n```\n\nExample:\n\n```\nSet Jemmy Timeouts  3\n```"},{"name":"Set Slider Value","args":["identifier","value"],"doc":"Sets the value for the slider found from the current context.\n\nExample:\n\n```\nSet Slider Value  mySlider  7\n```"},{"name":"Set Spinner Number Value","args":["identifier","value"],"doc":"Sets the number value for the spinner found from the current context.\n\nExamples:\n\n```\nSet Spinner Number Value  mySpinner  100\nSet Spinner Number Value  mySpinner  7.5\n```"},{"name":"Set Spinner String Value","args":["identifier","value"],"doc":"Sets the string value for the spinner found from the current context.\n\nExample:\n\n```\nSet Spinner String Value  mySpinner  January\n```"},{"name":"Set System Property","args":["name","value"],"doc":"Set system property name to value Equal commmand line usage \\-Dname=value."},{"name":"Set Table Cell Value","args":["identifier","row","columnIdentifier","newValue"],"doc":"Sets cell value in a table.\n\nExample:\n\n```\nSet Table Cell Value  1  2  New value\n```"},{"name":"Set Window Size","args":["identifier","width","height"],"doc":"Sets a window size.\n\nExamples:\n\n```\nSet Window Size  Help  800  600  # Re-sizes the Help window to 800 px width and 600 px height.\n```"},{"name":"Slider Should Exist","args":["identifier"],"doc":"Fails if slider does not exist within current context.\n\nExample:\n\n```\nSlider Should Exist  mySlider\n```"},{"name":"Slider Should Not Exist","args":["identifier"],"doc":"Fails if slider exists within current context.\n\nExample:\n\n```\nSlider Should Not Exist  mySlider\n```"},{"name":"Spinner Should Exist","args":["identifier"],"doc":"Fails if spinner does not exist within current context.\n\nExample:\n\n```\nSpinner Should Exist  dateSpinner\n```"},{"name":"Spinner Should Not Exist","args":["identifier"],"doc":"Fails if spinner exists within current context.\n\nExample:\n\n```\nSpinner Should Not Exist  dateSpinner\n```"},{"name":"Start Application","args":["className","*args"],"doc":"Alias for [Launch Application](#Launch%20Application) keyword"},{"name":"Start Application In Separate Thread","args":["className","*args"],"doc":"Launches application in a separate thread with the given arguments. This is useful if your application does something that blocks e.g. opens up a dialog.\n\nExample:\n\n```\nStart Application In Separate Thread  com.acme.myapplication.MyApp\n```"},{"name":"Table Cell Popup Menu Should Be Disabled","args":["identifier","row","columnIdentifier","menuPath"],"doc":"Fails if the given table cell popup menu is enabled. Separator for items is `|`.\n\nExample:\n\n```\nTable Cell Popup Menu Should Be Disabled  myTable  1  3  Cell Actions|Clear Cell Value\n```"},{"name":"Table Cell Popup Menu Should Be Enabled","args":["identifier","row","columnIdentifier","menuPath"],"doc":"Fails if the given table cell popup menu is disabled. Separator for items is `|`.\n\nExample:\n\n```\nTable Cell Popup Menu Should Be Enabled  myTable  1  3  Cell Actions|Clear Cell Value\n```"},{"name":"Table Cell Should Be Editable","args":["identifier","row","columnIdentifier"],"doc":"Fails if given table cell is not editable in a table.\n\nExamples:\n\n```\nTable Cell Should Be Editable  myTable  0  2\nTable Cell Should Be Editable  myTable  1  Keyword\n```"},{"name":"Table Cell Should Be Selected","args":["identifier","row","columnIdentifier"],"doc":"Fails if given table cell is not selected in a table.\n\nExamples:\n\n```\nTable Cell Should Be Selected  myTable  0  2\nTable Cell Should Be Selected  myTable  1  Keyword\n```"},{"name":"Table Cell Should Not Be Editable","args":["identifier","row","columnIdentifier"],"doc":"Fails if given table cell is editable in a table.\n\nExamples:\n\n```\nTable Cell Should Not Be Editable  myTable  0  2\nTable Cell Should Not Be Editable  myTable  1  Keyword\n```"},{"name":"Table Cell Should Not Be Selected","args":["identifier","row","columnIdentifier"],"doc":"Fails if given table cell is selected in a table.\n\nExamples:\n\n```\nTable Cell Should Be Selected  myTable  0  2\nTable Cell Should Be Selected  myTable  1  Keyword\n```"},{"name":"Text Field Should Be Disabled","args":["identifier"],"doc":"Fails if text component (e.g. text field, password field, text area) is enabled.\n\nSee [Locating components](#Locating%20components) for details.\n\nExample:\n\n```\nTextfield Should Be Disabled  nameTextField\n```"},{"name":"Text Field Should Be Enabled","args":["identifier"],"doc":"Fails if text component (e.g. text field, password field, text area) is disabled.\n\nSee [Locating components](#Locating%20components) for details.\n\nExample:\n\n```\nTextfield Should Be Enabled  nameTextField\n```"},{"name":"Toggle Button Should Be Selected","args":["identifier"],"doc":"Fails if toggle button is not selected.\n\nExample:\n\n```\nToggle Button Should Be Selected  My Toggle Button\n```"},{"name":"Toggle Button Should Not Be Selected","args":["identifier"],"doc":"Fails if toggle button is selected.\n\nExample:\n\n```\nToggle Button Should Not Be Selected  My Toggle Button\n```"},{"name":"Tree Node Popup Menu Item Should Be Disabled","args":["identifier","nodeIdentifier","menuPath"],"doc":"Fails if given popup menu item is enabled.\n\nExamples:\n\n```\nTree Node Popup Menu Item Should Be Disabled  myTree  Root|Folder  New Folder\nTree Node Popup Menu Item Should Be Disabled  0  1  New Folder\n```"},{"name":"Tree Node Popup Menu Item Should Be Enabled","args":["identifier","nodeIdentifier","menuPath"],"doc":"Fails if given popup menu item is disabled.\n\nExamples:\n\n```\nTree Node Popup Menu Item Should Be Enabled  myTree  Root|Folder  New Folder\nTree Node Popup Menu Item Should Be Enabled  0  1  New Folder\n```"},{"name":"Tree Node Should Be Collapsed","args":["identifier","nodeIdentifier","jemmyTimeout="],"doc":"Fails if the tree node is expanded. Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout. See [Set Jemmy Timeout](#Set%20Jemmy%20Timeout) keyword for more information about jemmy timeouts.\n\nExample:\n\n```\nTree Node Should Be Collapsed  myTree  Root|Folder  \nTree Node Should Be Collapsed  myTree  Root|Folder  4\n```"},{"name":"Tree Node Should Be Expanded","args":["identifier","nodeIdentifier","jemmyTimeout="],"doc":"Fails if the tree node is collapsed. Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout. See [Set Jemmy Timeout](#Set%20Jemmy%20Timeout) keyword for more information about jemmy timeouts.\n\nExample:\n\n```\nTree Node Should Be Expanded  myTree  Root|Folder  \nTree Node Should Be Expanded  myTree  Root|Folder  4\n```"},{"name":"Tree Node Should Be Leaf","args":["identifier","nodeIdentifier","jemmyTimeout="],"doc":"Fails if the node has child nodes. Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout. See [Set Jemmy Timeout](#Set%20Jemmy%20Timeout) keyword for more information about jemmy timeouts.\n\nExample:\n\n```\nTree Node Should Be Leaf  myTree  Root|Folder  \nTree Node Should Be Leaf  myTree  Root|Folder  4\n```"},{"name":"Tree Node Should Be Selected","args":["identifier","nodeIdentifier","jemmyTimeout="],"doc":"Fails if the tree node is not selected. Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout. See [Set Jemmy Timeout](#Set%20Jemmy%20Timeout) keyword for more information about jemmy timeouts.\n\nExample:\n\n```\nTree Node Should Be Selected  myTree  Root|Folder  \nTree Node Should Be Selected  myTree  Root|Folder  4\n```"},{"name":"Tree Node Should Be Visible","args":["identifier","nodeIdentifier","jemmyTimeout="],"doc":"Fails if the tree node is not visible. Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout. See [Set Jemmy Timeout](#Set%20Jemmy%20Timeout) keyword for more information about jemmy timeouts.\n\nExample:\n\n```\nTree Node Should Be Visible  myTree  Root|Folder  \nTree Node Should Be Visible  myTree  Root|Folder  4\n```"},{"name":"Tree Node Should Exist","args":["identifier","nodeIdentifier"],"doc":"Fails if the tree node does not exist.\n\nExample:\n\n```\nTree Node Should Exist  myTree  Root|Folder\n```"},{"name":"Tree Node Should Not Be Leaf","args":["identifier","nodeIdentifier","jemmyTimeout="],"doc":"Fails if the node doesn't have child nodes. Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout. See [Set Jemmy Timeout](#Set%20Jemmy%20Timeout) keyword for more information about jemmy timeouts.\n\nExample:\n\n```\nTree Node Should Not Be Leaf  myTree  Root|Folder  \nTree Node Should Not Be Leaf  myTree  Root|Folder  4\n```"},{"name":"Tree Node Should Not Be Selected","args":["identifier","nodeIdentifier","jemmyTimeout="],"doc":"Fails if the tree node is selected. Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout. See [Set Jemmy Timeout](#Set%20Jemmy%20Timeout) keyword for more information about jemmy timeouts.\n\nExample:\n\n```\nTree Node Should Be Selected  myTree  Root|Folder  \nTree Node Should Be Selected  myTree  Root|Folder  4\n```"},{"name":"Tree Node Should Not Be Visible","args":["identifier","nodeIdentifier","jemmyTimeout=5"],"doc":"Fails if the tree node is visible. Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout. See [Set Jemmy Timeout](#Set%20Jemmy%20Timeout) keyword for more information about jemmy timeouts.\n\nExample:\n\n```\nTree Node Should Not Be Visible  myTree  Root|Folder  \nTree Node Should Not Be Visible  myTree  Root|Folder  4\n```"},{"name":"Tree Node Should Not Exist","args":["identifier","nodeIdentifier"],"doc":"Fails if the tree node exists.\n\nExample:\n\n```\nTree Node Should Not Exist  myTree  Root|Folder\n```"},{"name":"Type Into Combobox","args":["identifier","text"],"doc":"Types text into a combobox.\n\nExample:\n\n```\nType Into Combobox  myCombobox  someValue\n```"},{"name":"Type Into Table Cell","args":["identifier","row","columnIdentifier","newValue"],"doc":"Types a string into a table cell. Uses real keyboard events, this is useful when processing need to be triggered by input events.\n\nExample:\n\n```\nType Into Table Cell  1  2  New value\n```"},{"name":"Type Into Text Field","args":["identifier","text"],"doc":"Types text into a text component (e.g. text field, password field, text area). Same as [Insert Into Textfield](#Insert%20Into%20Text%20Field) but sends real key events when setting text field contents. Useful if application expects real keyboard events instead of only setting the text of the textfield.\n\nSee [Locating components](#Locating%20components) for details.\n\nExamples:\n\n```\nType Into Textfield  nameTextField  John Doe\nType Into Textfield  awt=streetaddress  Karaportti 3\n```"},{"name":"Uncheck All Checkboxes","args":[],"doc":"Unchecks all checkboxes in current context.\n\nExample:\n\n```\nSelect Context  My Checkbox Panel\nUncheck All Checkboxes  \n```"},{"name":"Uncheck Check Box","args":["identifier"],"doc":"Uses current context to search for a checkbox and when found, unchecks it.\n\nExample:\n\n```\nUncheck Check Box  My Checkbox\n```"},{"name":"Unselect Tree Node","args":["identifier","nodeIdentifier"],"doc":"Sets a tree node as unselected.\n\nExample:\n\n```\nUnselect Tree Node  myTree  Root|Folder\n```"}]}