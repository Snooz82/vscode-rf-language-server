{"name":"FakerLibrary","version":"","keywords":[{"name":"Add Provider","args":["self","provider"],"doc":""},{"name":"Address","args":[],"doc":":example '791 Crist Parks, Sashabury, IL 86039-9874'"},{"name":"Am Pm","args":[],"doc":""},{"name":"Android Platform Token","args":[],"doc":""},{"name":"Ascii Company Email","args":["*args","**kwargs"],"doc":""},{"name":"Ascii Email","args":["*args","**kwargs"],"doc":""},{"name":"Ascii Free Email","args":["*args","**kwargs"],"doc":""},{"name":"Ascii Safe Email","args":["*args","**kwargs"],"doc":""},{"name":"Bank Country","args":[],"doc":""},{"name":"Bban","args":[],"doc":""},{"name":"Binary","args":["length=1048576"],"doc":"Returns random binary blob.\n\nDefault blob size is 1 Mb."},{"name":"Boolean","args":["chance_of_getting_true=50"],"doc":""},{"name":"Bothify","args":["text=## ??","letters=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"],"doc":"Replaces all placeholders with random numbers and letters.\n\n:param text: string to be parsed :returns: string with all numerical and letter placeholders filled in"},{"name":"Bs","args":[],"doc":":example 'integrate extensible convergence'"},{"name":"Building Number","args":[],"doc":":example '791'"},{"name":"Catch Phrase","args":[],"doc":":example 'Robust full-range hub'"},{"name":"Century","args":[],"doc":":example 'XVII'"},{"name":"Chrome","args":["version_from=13","version_to=63","build_from=800","build_to=899"],"doc":""},{"name":"City","args":[],"doc":":example 'Sashabury'"},{"name":"City Prefix","args":[],"doc":""},{"name":"City Suffix","args":[],"doc":":example 'town'"},{"name":"Color","args":["hue=None","luminosity=None","color_format=hex"],"doc":"Creates a color in specified format\n\n:param hue: monochrome, red, orange, yellow, green, blue, purple, pink, a number from 0 to 360, or a tuple/list of 2 numbers from 0 to 360 :param luminosity: bright, dark, light, or random :param color\\_format: hsv, hsl, rgb, or hex with hex being default :return: color in the specified format"},{"name":"Color Name","args":[],"doc":""},{"name":"Company","args":[],"doc":":example 'Acme Ltd'"},{"name":"Company Email","args":["*args","**kwargs"],"doc":""},{"name":"Company Suffix","args":[],"doc":":example 'Ltd'"},{"name":"Coordinate","args":["center=None","radius=0.001"],"doc":"Optionally center the coord and pick a point within radius."},{"name":"Country","args":[],"doc":""},{"name":"Country Code","args":["representation=alpha-2"],"doc":""},{"name":"Credit Card Expire","args":["start=now","end=+10y","date_format=%m/%y"],"doc":""},{"name":"Credit Card Full","args":["card_type=None"],"doc":""},{"name":"Credit Card Number","args":["card_type=None"],"doc":"Returns a valid credit card number."},{"name":"Credit Card Provider","args":["card_type=None"],"doc":"Returns the provider's name of the credit card."},{"name":"Credit Card Security Code","args":["card_type=None"],"doc":"Returns a security code string."},{"name":"Cryptocurrency","args":[],"doc":""},{"name":"Cryptocurrency Code","args":[],"doc":""},{"name":"Cryptocurrency Name","args":[],"doc":""},{"name":"Currency","args":[],"doc":""},{"name":"Currency Code","args":[],"doc":""},{"name":"Currency Name","args":[],"doc":""},{"name":"Date","args":["pattern=%Y-%m-%d","end_datetime=None"],"doc":"Get a date string between January 1, 1970 and now :param pattern format :example '2008-11-27'"},{"name":"Date Between","args":["start_date=-30y","end_date=today"],"doc":"Get a Date object based on a random date between two given dates. Accepts date strings that can be recognized by strtotime().\n\n:param start\\_date Defaults to 30 years ago :param end\\_date Defaults to \"today\" :example Date('1999-02-02') :return Date"},{"name":"Date Between Dates","args":["date_start=None","date_end=None"],"doc":"Takes two Date objects and returns a random date between the two given dates. Accepts Date or Datetime objects\n\n:param date\\_start: Date :param date\\_end: Date :return Date"},{"name":"Date Object","args":["end_datetime=None"],"doc":"Get a date object between January 1, 1970 and now :example datetime.date(2016, 9, 20)"},{"name":"Date Of Birth","args":["tzinfo=None","minimum_age=0","maximum_age=115"],"doc":"Generate a random date of birth represented as a Date object, constrained by optional miminimum\\_age and maximum\\_age parameters.\n\n:param tzinfo Defaults to None. :param minimum\\_age Defaults to 0. :param maximum\\_age Defaults to 115.\n\n:example Date('1979-02-02') :return Date"},{"name":"Date This Century","args":["before_today=True","after_today=False"],"doc":"Gets a Date object for the current century.\n\n:param before\\_today: include days in current century before today :param after\\_today: include days in current century after today :example Date('2012-04-04') :return Date"},{"name":"Date This Decade","args":["before_today=True","after_today=False"],"doc":"Gets a Date object for the decade year.\n\n:param before\\_today: include days in current decade before today :param after\\_today: include days in current decade after today :example Date('2012-04-04') :return Date"},{"name":"Date This Month","args":["before_today=True","after_today=False"],"doc":"Gets a Date object for the current month.\n\n:param before\\_today: include days in current month before today :param after\\_today: include days in current month after today :param tzinfo: timezone, instance of datetime.tzinfo subclass :example DateTime('2012-04-04 11:02:02') :return DateTime"},{"name":"Date This Year","args":["before_today=True","after_today=False"],"doc":"Gets a Date object for the current year.\n\n:param before\\_today: include days in current year before today :param after\\_today: include days in current year after today :example Date('2012-04-04') :return Date"},{"name":"Date Time","args":["tzinfo=None","end_datetime=None"],"doc":"Get a datetime object for a date between January 1, 1970 and now :param tzinfo: timezone, instance of datetime.tzinfo subclass :example DateTime('2005-08-16 20:39:21') :return datetime"},{"name":"Date Time Ad","args":["tzinfo=None","end_datetime=None","start_datetime=None"],"doc":"Get a datetime object for a date between January 1, 001 and now :param tzinfo: timezone, instance of datetime.tzinfo subclass :example DateTime('1265-03-22 21:15:52') :return datetime"},{"name":"Date Time Between","args":["start_date=-30y","end_date=now","tzinfo=None"],"doc":"Get a DateTime object based on a random date between two given dates. Accepts date strings that can be recognized by strtotime().\n\n:param start\\_date Defaults to 30 years ago :param end\\_date Defaults to \"now\" :param tzinfo: timezone, instance of datetime.tzinfo subclass :example DateTime('1999-02-02 11:42:52') :return DateTime"},{"name":"Date Time Between Dates","args":["datetime_start=None","datetime_end=None","tzinfo=None"],"doc":"Takes two DateTime objects and returns a random datetime between the two given datetimes. Accepts DateTime objects.\n\n:param datetime\\_start: DateTime :param datetime\\_end: DateTime :param tzinfo: timezone, instance of datetime.tzinfo subclass :example DateTime('1999-02-02 11:42:52') :return DateTime"},{"name":"Date Time This Century","args":["before_now=True","after_now=False","tzinfo=None"],"doc":"Gets a DateTime object for the current century.\n\n:param before\\_now: include days in current century before today :param after\\_now: include days in current century after today :param tzinfo: timezone, instance of datetime.tzinfo subclass :example DateTime('2012-04-04 11:02:02') :return DateTime"},{"name":"Date Time This Decade","args":["before_now=True","after_now=False","tzinfo=None"],"doc":"Gets a DateTime object for the decade year.\n\n:param before\\_now: include days in current decade before today :param after\\_now: include days in current decade after today :param tzinfo: timezone, instance of datetime.tzinfo subclass :example DateTime('2012-04-04 11:02:02') :return DateTime"},{"name":"Date Time This Month","args":["before_now=True","after_now=False","tzinfo=None"],"doc":"Gets a DateTime object for the current month.\n\n:param before\\_now: include days in current month before today :param after\\_now: include days in current month after today :param tzinfo: timezone, instance of datetime.tzinfo subclass :example DateTime('2012-04-04 11:02:02') :return DateTime"},{"name":"Date Time This Year","args":["before_now=True","after_now=False","tzinfo=None"],"doc":"Gets a DateTime object for the current year.\n\n:param before\\_now: include days in current year before today :param after\\_now: include days in current year after today :param tzinfo: timezone, instance of datetime.tzinfo subclass :example DateTime('2012-04-04 11:02:02') :return DateTime"},{"name":"Day Of Month","args":[],"doc":""},{"name":"Day Of Week","args":[],"doc":""},{"name":"Domain Name","args":["*args","**kwargs"],"doc":"Produce an Internet domain name with the specified number of subdomain levels.\n\n\\>>> domain\\_name() nichols-phillips.com >>> domain\\_name(2) williamson-hopkins.jackson.com"},{"name":"Domain Word","args":["*args","**kwargs"],"doc":""},{"name":"Ean","args":["length=13"],"doc":""},{"name":"Ean 13","args":["leading_zero=None"],"doc":"Creates an EAN-13 barcode\n\n:param leading\\_zero: Leading digit will be 0 if True, 1-9 if False, and 0-9 otherwise :return: An EAN-13 barcode"},{"name":"Ean 8","args":[],"doc":""},{"name":"Ein","args":[],"doc":"Generate a random United States Employer Identification Number (EIN).\n\nAn United States An Employer Identification Number (EIN) is also known as a Federal Tax Identification Number, and is used to identify a business entity. EINs follow a format of a two-digit prefix followed by a hyphen and a seven-digit sequence: ##-######\n\n[https://www.irs.gov/businesses/small-businesses-self-employed/employer-id-numbers](https://www.irs.gov/businesses/small-businesses-self-employed/employer-id-numbers)"},{"name":"Email","args":["*args","**kwargs"],"doc":""},{"name":"File Extension","args":["category=None"],"doc":":param category: audio|image|office|text|video"},{"name":"File Name","args":["category=None","extension=None"],"doc":":param category: audio|image|office|text|video :param extension: file extension"},{"name":"File Path","args":["depth=1","category=None","extension=None"],"doc":":param category: audio|image|office|text|video :param extension: file extension :param depth: depth of the file (depth >= 0)"},{"name":"Firefox","args":[],"doc":""},{"name":"First Name","args":[],"doc":""},{"name":"First Name Female","args":[],"doc":""},{"name":"First Name Male","args":[],"doc":""},{"name":"Format","args":["self","formatter","*args","**kwargs"],"doc":"This is a secure way to make a fake from another Provider."},{"name":"Free Email","args":["*args","**kwargs"],"doc":""},{"name":"Free Email Domain","args":["*args","**kwargs"],"doc":""},{"name":"Future Date","args":["end_date=+30d","tzinfo=None"],"doc":"Get a Date object based on a random date between 1 day from now and a given date. Accepts date strings that can be recognized by strtotime().\n\n:param end\\_date Defaults to \"+30d\" :param tzinfo: timezone, instance of datetime.tzinfo subclass :example DateTime('1999-02-02 11:42:52') :return DateTime"},{"name":"Future Datetime","args":["end_date=+30d","tzinfo=None"],"doc":"Get a DateTime object based on a random date between 1 second form now and a given date. Accepts date strings that can be recognized by strtotime().\n\n:param end\\_date Defaults to \"+30d\" :param tzinfo: timezone, instance of datetime.tzinfo subclass :example DateTime('1999-02-02 11:42:52') :return DateTime"},{"name":"Generator Format Token","args":["self","matches"],"doc":""},{"name":"Get Formatter","args":["self","formatter"],"doc":""},{"name":"Get Providers","args":["self"],"doc":"Returns added providers."},{"name":"Hex Color","args":[],"doc":""},{"name":"Hexify","args":["text=^^^^","upper=False"],"doc":"Replaces all circumflex ('^') occurrences with a random hexadecimal character.\n\n:param text: string to be parsed :param upper: Format as uppercase hexadecimal :returns: string with all letter placeholders filled in"},{"name":"Hostname","args":["*args","**kwargs"],"doc":"Produce a hostname with specified number of subdomain levels.\n\n\\>>> hostname() db-01.nichols-phillips.com >>> hostname(0) laptop-56 >>> hostname(2) web-12.williamson-hopkins.jackson.com"},{"name":"Iban","args":[],"doc":""},{"name":"Image Url","args":["width=None","height=None"],"doc":"Returns URL to placeholder image Example: [http://placehold.it/640x480](http://placehold.it/640x480)"},{"name":"Init","args":["locale=None","providers=None","seed=None"],"doc":"Initialize self. See help(type(self)) for accurate signature."},{"name":"Internet Explorer","args":[],"doc":""},{"name":"Invalid Ssn","args":[],"doc":"Generate a random invalid United States Social Security Identification Number (SSN).\n\nInvalid SSNs have the following characteristics: Cannot begin with the number 9 Cannot begin with 666 in positions 1 - 3 Cannot begin with 000 in positions 1 - 3 Cannot contain 00 in positions 4 - 5 Cannot contain 0000 in positions 6 - 9\n\n[https://www.ssa.gov/kc/SSAFactSheet--IssuingSSNs.pdf](https://www.ssa.gov/kc/SSAFactSheet--IssuingSSNs.pdf)\n\nAdditionally, return an invalid SSN that is NOT a valid ITIN by excluding certain ITIN related \"group\" values"},{"name":"Ios Platform Token","args":[],"doc":""},{"name":"Ipv 4","args":["network=False","address_class=None","private=None"],"doc":"Returns a random IPv4 address or network with a valid CIDR.\n\n:param network: Network address :param address\\_class: IPv4 address class (a, b, or c) :param private: Public or private :returns: IPv4"},{"name":"Ipv 6","args":["network=False"],"doc":"Produce a random IPv6 address or network with a valid CIDR"},{"name":"Ipv4 Network Class","args":[],"doc":"Returns a IPv4 network class 'a', 'b' or 'c'.\n\n:returns: IPv4 network class"},{"name":"Ipv4 Private","args":["network=False","address_class=None"],"doc":"Returns a private IPv4.\n\n:param network: Network address :param address\\_class: IPv4 address class (a, b, or c) :returns: Private IPv4"},{"name":"Ipv4 Public","args":["network=False","address_class=None"],"doc":"Returns a public IPv4 excluding private blocks.\n\n:param network: Network address :param address\\_class: IPv4 address class (a, b, or c) :returns: Public IPv4"},{"name":"Isbn 10","args":["separator=-"],"doc":""},{"name":"Isbn 13","args":["separator=-"],"doc":""},{"name":"Iso 8601","args":["tzinfo=None","end_datetime=None"],"doc":":param tzinfo: timezone, instance of datetime.tzinfo subclass :example '2003-10-21T16:05:52+0000'"},{"name":"Itin","args":[],"doc":"Generate a random United States Individual Taxpayer Identification Number (ITIN).\n\nAn United States Individual Taxpayer Identification Number (ITIN) is a tax processing number issued by the Internal Revenue Service. It is a nine-digit number that always begins with the number 9 and has a range of 70-88 in the fourth and fifth digit. Effective April 12, 2011, the range was extended to include 900-70-0000 through 999-88-9999, 900-90-0000 through 999-92-9999 and 900-94-0000 through 999-99-9999. [https://www.irs.gov/individuals/international-taxpayers/general-itin-information](https://www.irs.gov/individuals/international-taxpayers/general-itin-information)"},{"name":"Job","args":[],"doc":""},{"name":"Language Code","args":[],"doc":""},{"name":"Last Name","args":[],"doc":""},{"name":"Last Name Female","args":[],"doc":""},{"name":"Last Name Male","args":[],"doc":""},{"name":"Latitude","args":[],"doc":""},{"name":"Latlng","args":[],"doc":""},{"name":"Lexify","args":["text=????","letters=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"],"doc":"Replaces all question mark ('?') occurrences with a random letter.\n\n:param text: string to be parsed :param letters: a set of letters to choose from. :returns: string with all letter placeholders filled in"},{"name":"License Plate","args":[],"doc":""},{"name":"Linux Platform Token","args":[],"doc":""},{"name":"Linux Processor","args":[],"doc":""},{"name":"Local Latlng","args":["country_code=US","coords_only=False"],"doc":"Returns a location known to exist on land in a country specified by country\\_code. Defaults to 'en\\_US'. See the land\\_coords list for available locations/countries."},{"name":"Locale","args":[],"doc":""},{"name":"Location On Land","args":["coords_only=False"],"doc":"Returns a random tuple specifying a coordinate set guaranteed to exist on land. Format is (latitude, longitude, place name, two-letter country code, timezone) Pass coords\\_only to return coordinates without metadata."},{"name":"Longitude","args":[],"doc":""},{"name":"Mac Address","args":[],"doc":""},{"name":"Mac Platform Token","args":[],"doc":""},{"name":"Mac Processor","args":[],"doc":""},{"name":"Md 5","args":["raw_output=False"],"doc":"Calculates the md5 hash of a given string :example 'cfcd208495d565ef66e7dff9f98764da'"},{"name":"Military Apo","args":[],"doc":":example 'PSC 5394 Box 3492"},{"name":"Military Dpo","args":[],"doc":":example 'Unit 3333 Box 9342'"},{"name":"Military Ship","args":[],"doc":":example 'USS'"},{"name":"Military State","args":[],"doc":":example 'APO'"},{"name":"Mime Type","args":["category=None"],"doc":":param category: application|audio|image|message|model|multipart|text|video"},{"name":"Month","args":[],"doc":""},{"name":"Month Name","args":[],"doc":""},{"name":"Msisdn","args":[],"doc":"[https://en.wikipedia.org/wiki/MSISDN](https://en.wikipedia.org/wiki/MSISDN)"},{"name":"Name","args":[],"doc":":example 'John Doe'"},{"name":"Name Female","args":[],"doc":""},{"name":"Name Male","args":[],"doc":""},{"name":"Null Boolean","args":[],"doc":""},{"name":"Numerify","args":["text=###"],"doc":"Replaces all placeholders in given text with randomized values, replacing: all hash sign ('#') occurrences with a random digit (from 0 to 9); all percentage sign ('%') occurrences with a random non-zero digit (from 1 to 9); all exclamation mark ('!') occurrences with a random digit (from 0 to 9) or an empty string; and all at symbol ('@') occurrences with a random non-zero digit (from 1 to 9) or an empty string.\n\n:param text: string to be parsed :returns: string with all numerical placeholders filled in"},{"name":"Opera","args":[],"doc":""},{"name":"Paragraph","args":["nb_sentences=3","variable_nb_sentences=True","ext_word_list=None"],"doc":":returns: A single paragraph. For example: 'Sapiente sunt omnis. Ut pariatur ad autem ducimus et. Voluptas rem voluptas sint modi dolorem amet.'\n\nKeyword arguments: :param nb\\_sentences: around how many sentences the paragraph should contain :param variable\\_nb\\_sentences: set to false if you want exactly `nb` sentences returned, otherwise the result may include a number of sentences of `nb` +/-40% (with a minimum of 1) :param ext\\_word\\_list: a list of words you would like to have instead of 'Lorem ipsum'.\n\n:rtype: str"},{"name":"Paragraphs","args":["nb=3","ext_word_list=None"],"doc":"Generate an array of paragraphs :example \\[paragraph1, paragraph2, paragraph3\\] :param nb: how many paragraphs to return :param ext\\_word\\_list: a list of words you would like to have instead of 'Lorem ipsum'.\n\n:rtype: list"},{"name":"Parse","args":["self","text"],"doc":"Replaces tokens (like '{{ tokenName }}' or '{{tokenName}}') with the result from the token method call."},{"name":"Password","args":["length=10","special_chars=True","digits=True","upper_case=True","lower_case=True"],"doc":"Generates a random password. @param length: Integer. Length of a password @param special\\_chars: Boolean. Whether to use special characters !@#$%^&\\*()\\_+ @param digits: Boolean. Whether to use digits @param upper\\_case: Boolean. Whether to use upper letters @param lower\\_case: Boolean. Whether to use lower letters @return: String. Random password"},{"name":"Past Date","args":["start_date=-30d","tzinfo=None"],"doc":"Get a Date object based on a random date between a given date and 1 day ago. Accepts date strings that can be recognized by strtotime().\n\n:param start\\_date Defaults to \"-30d\" :param tzinfo: timezone, instance of datetime.tzinfo subclass :example DateTime('1999-02-02 11:42:52') :return DateTime"},{"name":"Past Datetime","args":["start_date=-30d","tzinfo=None"],"doc":"Get a DateTime object based on a random date between a given date and 1 second ago. Accepts date strings that can be recognized by strtotime().\n\n:param start\\_date Defaults to \"-30d\" :param tzinfo: timezone, instance of datetime.tzinfo subclass :example DateTime('1999-02-02 11:42:52') :return DateTime"},{"name":"Phone Number","args":[],"doc":""},{"name":"Postalcode","args":[],"doc":""},{"name":"Postalcode In State","args":["state_abbr=None"],"doc":""},{"name":"Postalcode Plus4","args":[],"doc":""},{"name":"Postcode","args":[],"doc":":example 86039-9874"},{"name":"Postcode In State","args":["state_abbr=None"],"doc":":returns: A random postcode within the provided state abbreviation\n\n:param state\\_abbr: A state abbreviation"},{"name":"Prefix","args":[],"doc":""},{"name":"Prefix Female","args":[],"doc":""},{"name":"Prefix Male","args":[],"doc":""},{"name":"Profile","args":["fields=None","sex=None"],"doc":"Generates a complete profile. If \"fields\" is not empty, only the fields in the list will be returned"},{"name":"Provider","args":["self","name"],"doc":""},{"name":"Pybool","args":[],"doc":""},{"name":"Pydecimal","args":["left_digits=None","right_digits=None","positive=False","min_value=None","max_value=None"],"doc":""},{"name":"Pydict","args":["nb_elements=10","variable_nb_elements=True","*value_types"],"doc":"Returns a dictionary.\n\n:nb\\_elements: number of elements for dictionary :variable\\_nb\\_elements: is use variable number of elements for dictionary :value\\_types: type of dictionary values"},{"name":"Pyfloat","args":["left_digits=None","right_digits=None","positive=False","min_value=None","max_value=None"],"doc":""},{"name":"Pyint","args":["min_value=0","max_value=9999","step=1"],"doc":""},{"name":"Pyiterable","args":["nb_elements=10","variable_nb_elements=True","*value_types"],"doc":""},{"name":"Pylist","args":["nb_elements=10","variable_nb_elements=True","*value_types"],"doc":""},{"name":"Pyset","args":["nb_elements=10","variable_nb_elements=True","*value_types"],"doc":""},{"name":"Pystr","args":["min_chars=None","max_chars=20"],"doc":"Generates a random string of upper and lowercase letters. :type min\\_chars: int :type max\\_chars: int :return: String. Random of random length between min and max characters."},{"name":"Pystr Format","args":["string_format=?#-###{{random_int}}{{random_letter}}","letters=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"],"doc":""},{"name":"Pystruct","args":["count=10","*value_types"],"doc":""},{"name":"Pytuple","args":["nb_elements=10","variable_nb_elements=True","*value_types"],"doc":""},{"name":"Random Choices","args":["elements=('a', 'b', 'c')","length=None"],"doc":"Returns a list of random, non-unique elements from a passed object.\n\nIf elements is an OrderedDict, the value will be used as a weighting element. For example::\n\nrandom\\_element(OrderedDict(\\[ (\"{{variable\\_1}}\", 0.5), (\"{{variable\\_2}}\", 0.2), (\"{{variable\\_3}}\", 0.2), (\"{{variable\\_4}}\": 0.1) \\])\n\nwill have the following distribution: \\* variable\\_1: 50% probability \\* variable\\_2: 20% probability \\* variable\\_3: 20% probability \\* variable\\_4: 10% probability"},{"name":"Random Digit","args":[],"doc":"Returns a random digit/number between 0 and 9."},{"name":"Random Digit Not Null","args":[],"doc":"Returns a random non-zero digit/number between 1 and 9."},{"name":"Random Digit Not Null Or Empty","args":[],"doc":"Returns a random non-zero digit/number between 1 and 9 or and empty string."},{"name":"Random Digit Or Empty","args":[],"doc":"Returns a random digit/number between 0 and 9 or an empty string."},{"name":"Random Element","args":["elements=('a', 'b', 'c')"],"doc":"Returns a random element from a passed object.\n\nIf elements is an OrderedDict, the value will be used as a weighting element. For example::\n\nrandom\\_element(OrderedDict(\\[ (\"{{variable\\_1}}\", 0.5), (\"{{variable\\_2}}\", 0.2), (\"{{variable\\_3}}\", 0.2), (\"{{variable\\_4}}\": 0.1) \\])\n\nwill have the following distribution: \\* variable\\_1: 50% probability \\* variable\\_2: 20% probability \\* variable\\_3: 20% probability \\* variable\\_4: 10% probability"},{"name":"Random Elements","args":["elements=('a', 'b', 'c')","length=None","unique=False"],"doc":""},{"name":"Random Int","args":["min=0","max=9999","step=1"],"doc":"Returns a random integer between two values.\n\n:param min: lower bound value (inclusive; default=0) :param max: upper bound value (inclusive; default=9999) :param step: range step (default=1) :returns: random integer between min and max"},{"name":"Random Letter","args":[],"doc":"Returns a random letter (between a-z and A-Z)."},{"name":"Random Letters","args":["length=16"],"doc":"Returns a random letter (between a-z and A-Z)."},{"name":"Random Lowercase Letter","args":[],"doc":"Returns a random lowercase letter (between a-z)."},{"name":"Random Number","args":["digits=None","fix_len=False"],"doc":"Returns a random number with 1 digit (default, when digits==None), a random number with 0 to given number of digits, or a random number with given number to given number of digits (when `fix_len==True`).\n\n:param digits: maximum number of digits :param fix\\_len: should the number have fixed length? :returns: random number with 0 to given number of digits or fixed length number"},{"name":"Random Sample","args":["elements=('a', 'b', 'c')","length=None"],"doc":"Returns a list of random unique elements for the specified length. Multiple occurrences of the same value increase its probability to be in the output."},{"name":"Random Uppercase Letter","args":[],"doc":"Returns a random letter (between A-Z)."},{"name":"Randomize Nb Elements","args":["number=10","le=False","ge=False","min=None","max=None"],"doc":"Returns a random value near number.\n\n:param number: value to which the result must be near :param le: result must be lower or equal to number :param ge: result must be greater or equal to number :returns: a random int near number"},{"name":"Rgb Color","args":[],"doc":""},{"name":"Rgb Css Color","args":[],"doc":""},{"name":"Safari","args":[],"doc":""},{"name":"Safe Color Name","args":[],"doc":""},{"name":"Safe Email","args":["*args","**kwargs"],"doc":""},{"name":"Safe Hex Color","args":[],"doc":""},{"name":"Secondary Address","args":[],"doc":""},{"name":"Seed","args":["seed=None"],"doc":""},{"name":"Seed Instance","args":["self","seed=None"],"doc":"Calls random.seed"},{"name":"Sentence","args":["nb_words=6","variable_nb_words=True","ext_word_list=None"],"doc":"Generate a random sentence :example 'Lorem ipsum dolor sit amet.'\n\n:param nb\\_words: around how many words the sentence should contain :param variable\\_nb\\_words: set to false if you want exactly `nb` words returned, otherwise the result may include a number of words of `nb` +/-40% (with a minimum of 1) :param ext\\_word\\_list: a list of words you would like to have instead of 'Lorem ipsum'.\n\n:rtype: str"},{"name":"Sentences","args":["nb=3","ext_word_list=None"],"doc":"Generate an array of sentences :example \\['Lorem ipsum dolor sit amet.', 'Consectetur adipisicing eli.'\\]\n\nKeyword arguments: :param nb: how many sentences to return :param ext\\_word\\_list: a list of words you would like to have instead of 'Lorem ipsum'.\n\n:rtype: list"},{"name":"Set Formatter","args":["self","name","method"],"doc":"This method adds a provider method to generator. Override this method to add some decoration or logging stuff."},{"name":"Sha 1","args":["raw_output=False"],"doc":"Calculates the sha1 hash of a given string :example 'b5d86317c2a144cd04d0d7c03b2b02666fafadf2'"},{"name":"Sha 256","args":["raw_output=False"],"doc":"Calculates the sha256 hash of a given string :example '85086017559ccc40638fcde2fecaf295e0de7ca51b7517b6aebeaaf75b4d4654'"},{"name":"Simple Profile","args":["sex=None"],"doc":"Generates a basic profile with personal informations"},{"name":"Slug","args":["*args","**kwargs"],"doc":"Django algorithm"},{"name":"Ssn","args":["taxpayer_identification_number_type=SSN"],"doc":"Generate a random United States Taxpayer Identification Number of the specified type.\n\nIf no type is specified, a US SSN is returned."},{"name":"State","args":[],"doc":""},{"name":"State Abbr","args":["include_territories=True"],"doc":":returns: A random state or territory abbreviation.\n\n:param include\\_territories: If True, territories will be included. If False, only states will be returned."},{"name":"Street Address","args":[],"doc":":example '791 Crist Parks'"},{"name":"Street Name","args":[],"doc":":example 'Crist Parks'"},{"name":"Street Suffix","args":[],"doc":":example 'Avenue'"},{"name":"Suffix","args":[],"doc":""},{"name":"Suffix Female","args":[],"doc":""},{"name":"Suffix Male","args":[],"doc":""},{"name":"Text","args":["max_nb_chars=200","ext_word_list=None"],"doc":"Generate a text string. Depending on the \\`\\`max\\_nb\\_chars, returns a string made of words, sentences, or paragraphs. :example 'Sapiente sunt omnis. Ut pariatur ad autem ducimus et. Voluptas rem voluptas sint modi dolorem amet.'\n\nKeyword arguments: :param max\\_nb\\_chars: Maximum number of characters the text should contain (minimum 5) :param ext\\_word\\_list: a list of words you would like to have instead of 'Lorem ipsum'.\n\n:rtype str"},{"name":"Texts","args":["nb_texts=3","max_nb_chars=200","ext_word_list=None"],"doc":"Generate an array of texts :example \\[text1, text2, text3\\] :param nb\\_texts: How many texts to return :param max\\_nb\\_chars: Maximum number of characters the text should contain (minimum 5) :param ext\\_word\\_list: a list of words you would like to have instead of 'Lorem ipsum'.\n\n:rtype: list"},{"name":"Time","args":["pattern=%H:%M:%S","end_datetime=None"],"doc":"Get a time string (24h format by default) :param pattern format :example '15:02:34'"},{"name":"Time Delta","args":["end_datetime=None"],"doc":"Get a timedelta object"},{"name":"Time Object","args":["end_datetime=None"],"doc":"Get a time object :example datetime.time(15, 56, 56, 772876)"},{"name":"Time Series","args":["start_date=-30d","end_date=now","precision=None","distrib=None","tzinfo=None"],"doc":"Returns a generator yielding tuples of `(<datetime>, <value>)`.\n\nThe data points will start at `start_date`, and be at every time interval specified by `precision`. `distrib` is a callable that accepts `<datetime>` and returns `<value>`"},{"name":"Timezone","args":[],"doc":""},{"name":"Tld","args":[],"doc":""},{"name":"Unix Device","args":["prefix=None"],"doc":":param prefix: sd|vd|xvd"},{"name":"Unix Partition","args":["prefix=None"],"doc":":param prefix: sd|vd|xvd"},{"name":"Unix Time","args":["end_datetime=None","start_datetime=None"],"doc":"Get a timestamp between January 1, 1970 and now, unless passed explicit start\\_datetime or end\\_datetime values. :example 1061306726"},{"name":"Upc A","args":["upc_ae_mode=False","base=None","number_system_digit=None"],"doc":"Creates a 12-digit UPC-A barcode\n\nNotes on UPC-A barcode and this method:\n\n*   EAN-13 is a superset of UPC-A. Simply put, leading zero + UPC-A = EAN-13.\n*   For the lack of a concise and better term, this provider uses the term \"upc\\_ae\" to mean that a UPC-A barcode can be converted to UPC-E.\n*   If upc\\_ae\\_mode is enabled, this method will only return UPC-A barcodes that can be converted to UPC-E. In this mode the leading digit (number system) of the UPC-A barcode may only start with 0 or 1.\n*   When upc\\_ae\\_mode is enabled, the number\\_system\\_digit may be explicitly set to 0 or 1. If it is not set or is invalid, either values will be chosen at random.\n*   When upc\\_ae\\_mode is enabled, a 6-digit UPC-E string base may be explicitly set. If it is not set or is invalid, a random 6 digit combination will be used.\n*   If upc\\_ae\\_mode is disabled, the values of base and number\\_system\\_digit are ignored.\n\n:param upc\\_ae\\_mode: Set to True explicitly to enable :param base: A 6-digit string :param number\\_system\\_digit: 0 or 1 :return: 12-digit UPC-A barcode"},{"name":"Upc E","args":["base=None","number_system_digit=None","safe_mode=True"],"doc":"Creates an 8-digit UPC-E barcode\n\nNotes on UPC-E barcode and this method:\n\n*   UPC-E barcodes can be expressed in 6, 7, or 8-digit formats, but this method uses the 8 digit format, since it is trivial to convert to the other two formats.\n*   The first digit of the barcode denotes the number system used, either 0 or 1.\n*   The last digit is the check digit (more on that below).\n*   The remaining 6 digits are a bit more involved, but they are referred to as the base argument elsewhere in this provider (for the lack of a concise and better term).\n*   Each UPC-E base have 2 UPC-A equivalents depending on the number system used.\n*   If the value of number\\_system\\_digit is not 0 or 1, either values will be chosen at random.\n*   A 6-digit string base may also be explicitly set. If invalid, it will be ignored, and a new value for base will be generated.\n*   Internally, this method first generates a UPC-A barcode that can be converted to UPC-E, and then actually performs a conversion for the result. This is because both the number system and check digits of the UPC-E barcode are inherited from its UPC-A equivalent.\n*   Then there is safe\\_mode. Enabling this guarantees that every UPC-E barcode generated can be converted to UPC-A, and that UPC-A value can be converted back again to UPC-E and still be equal to the original value. In other words, the statement a2e(e2a(e)) == e holds True.\n*   As to why there is safe\\_mode, it is because there are some UPC-E values that share the same UPC-A equivalent. For example, any UPC-E barcode of the form abc0000d, abc0003d, and abc0004d share the same UPC-A value abc00000000d, but that UPC-A value will only convert to abc0000d because of (a) how UPC-E is just a zero-suppressed version of UPC-A and (b) the rules around the conversion.\n\n:param base: A 6-digit string :param number\\_system\\_digit: First digit of the barcode :param safe\\_mode: True or False. Guarantees that every UPC-E barcode generated can be converted back-and-forth between UPC-A and UPC-E. :return: 8-digit UPC-E barcode"},{"name":"Uri","args":[],"doc":""},{"name":"Uri Extension","args":[],"doc":""},{"name":"Uri Page","args":[],"doc":""},{"name":"Uri Path","args":["deep=None"],"doc":""},{"name":"Url","args":["schemes=None"],"doc":":param schemes: a list of strings to use as schemes, one will chosen randomly. If None, it will generate http and https urls. Passing an empty list will result in schemeless url generation like \"://domain.com\".\n\n:returns: a random url string."},{"name":"User Agent","args":[],"doc":""},{"name":"User Name","args":["*args","**kwargs"],"doc":""},{"name":"Uuid 4","args":["cast_to=<class 'str'>"],"doc":"Generates a random UUID4 string. :param cast\\_to: Specify what type the UUID should be cast to. Default is str :type cast\\_to: callable"},{"name":"Windows Platform Token","args":[],"doc":""},{"name":"Word","args":["ext_word_list=None"],"doc":":returns: A random word, eg: 'lorem'\n\n:param ext\\_word\\_list: a list of words you would like to have instead of 'Lorem ipsum'\n\n:rtype: str"},{"name":"Words","args":["nb=3","ext_word_list=None","unique=False"],"doc":":returns: An array of random words. for example: \\['Lorem', 'ipsum', 'dolor'\\]\n\nKeyword arguments: :param nb: how many words to return :param ext\\_word\\_list: a list of words you would like to have instead of 'Lorem ipsum' :param unique: If True, the returned word list will contain unique words\n\n:rtype: list"},{"name":"Year","args":[],"doc":""},{"name":"Zipcode","args":[],"doc":""},{"name":"Zipcode In State","args":["state_abbr=None"],"doc":""},{"name":"Zipcode Plus4","args":[],"doc":""}]}