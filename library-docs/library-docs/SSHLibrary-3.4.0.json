{"name":"SSHLibrary","version":"3.4.0","keywords":[{"name":"Close All Connections","args":[],"doc":"Closes all open connections.\n\nThis keyword is ought to be used either in test or suite teardown to make sure all the connections are closed before the test execution finishes.\n\nAfter this keyword, the connection indices returned by [Open Connection](#Open%20Connection) are reset and start from `1`.\n\nExample:\n\n```\nOpen Connection  my.server.com\nOpen Connection  build.local.net\n# Do something with the connections  \n[Teardown]  Close all connections\n```"},{"name":"Close Connection","args":[],"doc":"Closes the current connection.\n\nNo other connection is made active by this keyword. Manually use [Switch Connection](#Switch%20Connection) to switch to another connection.\n\nExample:\n\n```\nOpen Connection  my.server.com  \nLogin  johndoe  secretpasswd\nGet File  results.txt  /tmp\nClose Connection    \n# Do something with /tmp/results.txt    \n```"},{"name":"Create Local Ssh Tunnel","args":["local_port","remote_host","remote_port=22","bind_address=None"],"doc":"The keyword uses the existing connection to set up local port forwarding (the openssh -L option) from a local port through a tunneled connection to a destination reachable from the SSH server machine.\n\nThe example below illustrates the forwarding from the local machine, of the connection on port 80 of an inaccessible server (secure.server.com) by connecting to a remote SSH server (remote.server.com) that has access to the secure server, and makes it available locally, on the port 9191:\n\n```\nOpen Connection  remote.server.com  prompt=$  \nLogin  johndoe  secretpasswd  \nCreate Local SSH Tunnel  9191  secure.server.com  80\n```\n\nThe tunnel is active as long as the connection is open.\n\nThe default `remote_port` is 22.\n\nBy default, anyone can connect on the specified port on the SSH client because the local machine listens on all interfaces. Access can be restricted by specifying a `bind_address`. Setting `bind_address` does not work with Jython.\n\nExample:\n\n```\nCreate Local SSH Tunnel  9191  secure.server.com  80  bind_address=127.0.0.1\n```\n\n`bind_address` is new in SSHLibrary 3.3.0."},{"name":"Directory Should Exist","args":["path"],"doc":"Fails if the given `path` does not point to an existing directory.\n\nExample:\n\n```\nDirectory Should Exist  /usr/share/man\n```\n\nNote that symlinks are followed:\n\n```\nDirectory Should Exist  /usr/local/man  # Points to /usr/share/man/\n```"},{"name":"Directory Should Not Exist","args":["path"],"doc":"Fails if the given `path` points to an existing directory.\n\nExample:\n\n```\nDirectory Should Not Exist  /non/existing\n```\n\nNote that this keyword follows symlinks. Thus the example fails if `/non/existing` is a link that points to an existing directory."},{"name":"Enable Ssh Logging","args":["logfile"],"doc":"Enables logging of SSH protocol output to given `logfile`.\n\nAll the existing and upcoming connections are logged onwards from the moment the keyword was called.\n\n`logfile` is path to a file that is writable by the current local user. If the file already exists, it will be overwritten.\n\nExample:\n\n```\nOpen Connection  my.server.com  # Not logged\nEnable SSH Logging  myserver.log  \nLogin  johndoe  secretpasswd\nOpen Connection  build.local.net  # Logged\n# Do something with the connections    \n# Check myserver.log for detailed debug information    \n```\n\n**Note:** This keyword does not work when using Jython."},{"name":"Execute Command","args":["command","return_stdout=True","return_stderr=False","return_rc=False","sudo=False","sudo_password=None","timeout=None","invoke_subsystem=False","forward_agent=False"],"doc":"Executes `command` on the remote machine and returns its outputs.\n\nThis keyword executes the `command` and returns after the execution has been finished. Use [Start Command](#Start%20Command) if the command should be started in the background.\n\nBy default, only the standard output is returned:\n\n```\n${stdout}=  Execute Command  echo 'Hello John!'\nShould Contain  ${stdout}  Hello John!\n```\n\nArguments `return_stdout`, `return_stderr` and `return_rc` are used to specify, what is returned by this keyword. If several arguments evaluate to a true value (see [Boolean arguments](#Boolean%20arguments)), multiple values are returned.\n\nIf errors are needed as well, set the respective argument value to true:\n\n```\n${stdout}  ${stderr}=  Execute Command  echo 'Hello John!'  return_stderr=True\nShould Be Empty  ${stderr}      \n```\n\nOften checking the return code is enough:\n\n```\n${rc}=  Execute Command  echo 'Hello John!'  return_stdout=False  return_rc=True\nShould Be Equal As Integers  ${rc}  0  # succeeded  \n```\n\nArguments `sudo` and `sudo_password` are used for executing commands within a sudo session. Due to different permission elevation in Cygwin, these two arguments will not work when using it.\n\n```\nExecute Command  pwd  sudo=True  sudo_password=test\n```\n\nThe `command` is always executed in a new shell. Thus possible changes to the environment (e.g. changing working directory) are not visible to the later keywords:\n\n```\n${pwd}=  Execute Command  pwd\nShould Be Equal  ${pwd}  /home/johndoe\nExecute Command  cd /tmp  \n${pwd}=  Execute Command  pwd\nShould Be Equal  ${pwd}  /home/johndoe\n```\n\n[Write](#Write) and [Read](#Read) can be used for running multiple commands in the same shell. See [interactive shells](#Interactive%20shells) section for more information.\n\nThis keyword logs the executed command and its exit status with log level `INFO`.\n\nIf the [timeout](#Timeout) expires before the command is executed, this keyword fails.\n\n`invoke_subsystem` will request a subsystem on the server, given by the `command` argument. If the server allows it, the channel will then be directly connected to the requested subsystem.\n\n`forward_agent` determines whether to forward the local SSH Agent process to the process being executed. This assumes that there is an agent in use (i.e. eval $(ssh-agent)). Setting `forward_agent` does not work with Jython.\n\n```\nExecute Command  ssh-add -L  forward_agent=True\n```\n\n`invoke_subsystem` and `forward_agent` are new in SSHLibrary 3.4.0."},{"name":"File Should Exist","args":["path"],"doc":"Fails if the given `path` does NOT point to an existing file.\n\nExample:\n\n```\nFile Should Exist  /boot/initrd.img\n```\n\nNote that symlinks are followed:\n\n```\nFile Should Exist  /initrd.img  # Points to /boot/initrd.img\n```"},{"name":"File Should Not Exist","args":["path"],"doc":"Fails if the given `path` points to an existing file.\n\nExample:\n\n```\nFile Should Not Exist  /non/existing\n```\n\nNote that this keyword follows symlinks. Thus the example fails if `/non/existing` is a link that points an existing file."},{"name":"Get Connection","args":["index_or_alias=None","index=False","host=False","alias=False","port=False","timeout=False","newline=False","prompt=False","term_type=False","width=False","height=False","encoding=False","escape_ansi=False"],"doc":"Returns information about the connection.\n\nConnection is not changed by this keyword, use [Switch Connection](#Switch%20Connection) to change the active connection.\n\nIf `index_or_alias` is not given, the information of the current connection is returned.\n\nThis keyword returns an object that has the following attributes:\n\n```\nName  Type  Explanation\nindex  integer  Number of the connection. Numbering starts from 1.\nhost  string  Destination hostname.\nalias  string  An optional alias given when creating the connection.\nport  integer  Destination port.\ntimeout  string  Timeout length in textual representation.\nnewline  string  The line break sequence used by Write keyword. See newline.\nprompt  string  Prompt character sequence for Read Until Prompt.\nterm_type  string  Type of the virtual terminal. See terminal settings.\nwidth  integer  Width of the virtual terminal. See terminal settings.\nheight  integer  Height of the virtual terminal. See terminal settings.\npath_separator  string  The path separator used on the remote host.\nencoding  string  The encoding used for inputs and outputs.\n```\n\nIf there is no connection, an object having `index` and `host` as `None` is returned, rest of its attributes having their values as configuration defaults.\n\nIf you want the information for all the open connections, use [Get Connections](#Get%20Connections).\n\nGetting connection information of the current connection:\n\n```\nOpen Connection  far.server.com    \nOpen Connection  near.server.com  prompt=>>  # Current connection\n${nearhost}=  Get Connection    \nShould Be Equal  ${nearhost.host}  near.server.com  \nShould Be Equal  ${nearhost.index}  2  \nShould Be Equal  ${nearhost.prompt}  >>  \nShould Be Equal  ${nearhost.term_type}  vt100  # From defaults\n```\n\nGetting connection information using an index:\n\n```\nOpen Connection  far.server.com  \nOpen Connection  near.server.com  # Current connection\n${farhost}=  Get Connection  1\nShould Be Equal  ${farhost.host}  far.server.com\n```\n\nGetting connection information using an alias:\n\n```\nOpen Connection  far.server.com  alias=far\nOpen Connection  near.server.com  # Current connection\n${farhost}=  Get Connection  far\nShould Be Equal  ${farhost.host}  far.server.com\nShould Be Equal  ${farhost.alias}  far\n```\n\nThis keyword can also return plain connection attributes instead of the whole connection object. This can be adjusted using the boolean arguments `index`, `host`, `alias`, and so on, that correspond to the attribute names of the object. If such arguments are given, and they evaluate to true (see [Boolean arguments](#Boolean%20arguments)), only the respective connection attributes are returned. Note that attributes are always returned in the same order arguments are specified in the signature.\n\n```\nOpen Connection  my.server.com  alias=example    \n${host}=  Get Connection  host=True    \nShould Be Equal  ${host}  my.server.com    \n${host}  ${alias}=  Get Connection  host=yes  alias=please\nShould Be Equal  ${host}  my.server.com    \nShould Be Equal  ${alias}  example    \n```\n\nGetting only certain attributes is especially useful when using this library via the Remote library interface. This interface does not support returning custom objects, but individual attributes can be returned just fine.\n\nThis keyword logs the connection information with log level `INFO`."},{"name":"Get Connections","args":[],"doc":"Returns information about all the open connections.\n\nThis keyword returns a list of objects that are identical to the ones returned by [Get Connection](#Get%20Connection).\n\nExample:\n\n```\nOpen Connection  near.server.com  timeout=10s\nOpen Connection  far.server.com  timeout=5s\n${nearhost}  ${farhost}=  Get Connections\nShould Be Equal  ${nearhost.host}  near.server.com\nShould Be Equal As Integers  ${nearhost.timeout}  10\nShould Be Equal As Integers  ${farhost.port}  22\nShould Be Equal As Integers  ${farhost.timeout}  5\n```\n\nThis keyword logs the information of connections with log level `INFO`."},{"name":"Get Directory","args":["source","destination=.","recursive=False","scp=OFF"],"doc":"Downloads a directory, including its content, from the remote machine to the local machine.\n\n`source` is a path on the remote machine. Both absolute paths and paths relative to the current working directory are supported.\n\n`destination` is the target path on the local machine. Both absolute paths and paths relative to the current working directory are supported.\n\n`recursive` specifies whether to recursively download all subdirectories inside `source`. Subdirectories are downloaded if the argument value evaluates to true (see [Boolean arguments](#Boolean%20arguments)).\n\n`scp` enables the use of scp (secure copy protocol) for the file transfer. See [Transfer files with SCP](#Transfer%20files%20with%20SCP) for more details.\n\nExamples:\n\n```\nGet Directory  /var/logs  /tmp\nGet Directory  /var/logs  /tmp/non/existing\nGet Directory  /var/logs  \nGet Directory  /var/logs  recursive=True\n```\n\nThe local `destination` is created as following:\n\n1\\. If `destination` is an existing path on the local machine, `source` directory is downloaded into it.\n\n2\\. If `destination` does not exist on the local machine, it is created and the content of `source` directory is downloaded into it.\n\n3\\. If `destination` is not given, `source` directory is downloaded into the current working directory on the local <machine. This is typically the directory where the test execution was started and thus accessible using the built-in `${EXECDIR}` variable.\n\nSee also [Get File](#Get%20File).\n\n`scp` is new in SSHLibrary 3.3.0."},{"name":"Get File","args":["source","destination=.","scp=OFF"],"doc":"Downloads file(s) from the remote machine to the local machine.\n\n`source` is a path on the remote machine. Both absolute paths and paths relative to the current working directory are supported. If the source contains wildcards explained in [glob patterns](#Glob%20patterns), all files matching it are downloaded. In this case `destination` must always be a directory.\n\n`destination` is the target path on the local machine. Both absolute paths and paths relative to the current working directory are supported.\n\n`scp` enables the use of scp (secure copy protocol) for the file transfer. See [Transfer files with SCP](#Transfer%20files%20with%20SCP) for more details.\n\nExamples:\n\n```\nGet File  /var/log/auth.log  /tmp/\nGet File  /tmp/example.txt  C:\\\\temp\\\\new_name.txt\nGet File  /path/to/*.txt  \n```\n\nThe local `destination` is created using the rules explained below:\n\n1\\. If the `destination` is an existing file, the `source` file is downloaded over it.\n\n2\\. If the `destination` is an existing directory, the `source` file is downloaded into it. Possible file with the same name is overwritten.\n\n3\\. If the `destination` does not exist and it ends with the path separator of the local operating system, it is considered a directory. The directory is then created and the `source` file is downloaded into it. Possible missing intermediate directories are also created.\n\n4\\. If the `destination` does not exist and does not end with the local path separator, it is considered a file. The `source` file is downloaded and saved using that file name, and possible missing intermediate directories are also created.\n\n5\\. If `destination` is not given, the current working directory on the local machine is used as the destination. This is typically the directory where the test execution was started and thus accessible using built-in `${EXECDIR}` variable.\n\nSee also [Get Directory](#Get%20Directory).\n\n`scp` is new in SSHLibrary 3.3.0."},{"name":"Get Pre Login Banner","args":["host=None","port=22"],"doc":"Returns the banner supplied by the server upon connect.\n\nThere are 2 ways of getting banner information.\n\n1\\. Independent of any connection:\n\n```\n${banner} =  Get Pre Login Banner  ${HOST}\nShould Be Equal  ${banner}  Testing pre-login banner\n```\n\nThe argument `host` is mandatory for getting banner key without an open connection.\n\n2\\. From the current connection:\n\n```\nOpen Connection  ${HOST}  prompt=${PROMPT}\nLogin  ${USERNAME}  ${PASSWORD}\n${banner} =  Get Pre Login Banner  \nShould Be Equal  ${banner}  Testing pre-login banner\n```\n\nNew in SSHLibrary 3.0.0.\n\n**Note:** This keyword does not work when using Jython."},{"name":"List Directories In Directory","args":["path","pattern=None","absolute=False"],"doc":"A wrapper for [List Directory](#List%20Directory) that returns only directories."},{"name":"List Directory","args":["path","pattern=None","absolute=False"],"doc":"Returns and logs items in the remote `path`, optionally filtered with `pattern`.\n\n`path` is a path on the remote machine. Both absolute paths and paths relative to the current working directory are supported. If `path` is a symlink, it is followed.\n\nItem names are returned in case-sensitive alphabetical order, e.g. `['A Name', 'Second', 'a lower case name', 'one more']`. Implicit directories `.` and `..` are not returned. The returned items are automatically logged.\n\nBy default, the item names are returned relative to the given remote path (e.g. `file.txt`). If you want them be returned in the absolute format (e.g. `/home/johndoe/file.txt`), set the `absolute` argument to any non-empty string.\n\nIf `pattern` is given, only items matching it are returned. The pattern is a glob pattern and its syntax is explained in the [Pattern matching](#Pattern%20matching) section.\n\nExamples (using also other [List Directory](#List%20Directory) variants):\n\n```\n@{items}=  List Directory  /home/johndoe    \n@{files}=  List Files In Directory  /tmp  *.txt  absolute=True\n```\n\nIf you are only interested in directories or files, use [List Files In Directory](#List%20Files%20In%20Directory) or [List Directories In Directory](#List%20Directories%20In%20Directory), respectively."},{"name":"List Files In Directory","args":["path","pattern=None","absolute=False"],"doc":"A wrapper for [List Directory](#List%20Directory) that returns only files."},{"name":"Login","args":["username","password","allow_agent=False","look_for_keys=False","delay=0.5 seconds","proxy_cmd=None"],"doc":"Logs into the SSH server with the given `username` and `password`.\n\nConnection must be opened before using this keyword.\n\nThis keyword reads, returns and logs the server output after logging in. If the [prompt](#Prompt) is set, everything until the prompt is read. Otherwise the output is read using the [Read](#Read) keyword with the given `delay`. The output is logged using the default [log level](#Loglevel).\n\n`proxy_cmd` is used to connect through a SSH proxy.\n\n`allow_agent` enables the connection to the SSH agent.\n\n`look_for_keys` enables the searching for discoverable private key files in `~/.ssh/`.\n\n`allow_agent` and `look_for_keys` arguments are new in SSHLibrary 3.4.0.\n\n**Note:** `allow_agent`, `look_for_keys` and `proxy_cmd` do not work when using Jython.\n\nExample that logs in and returns the output:\n\n```\nOpen Connection  linux.server.com    \n${output}=  Login  johndoe  secretpasswd\nShould Contain  ${output}  Last login at  \n```\n\nExample that logs in and returns everything until the prompt:\n\n```\nOpen Connection  linux.server.com  prompt=$  \n${output}=  Login  johndoe  secretpasswd\nShould Contain  ${output}  johndoe@linux:~$  \n```\n\nExample that logs in a remote server (linux.server.com) through a proxy server (proxy.server.com)\n\n```\nOpen Connection  linux.server.com      \n${output}=  Login  johndoe  secretpasswd  proxy_cmd=ssh -l user -i keyfile -W linux.server.com:22 proxy.server.com\nShould Contain  ${output}  Last login at    \n```"},{"name":"Login With Public Key","args":["username","keyfile","password=","allow_agent=False","look_for_keys=False","delay=0.5 seconds","proxy_cmd=None"],"doc":"Logs into the SSH server using key-based authentication.\n\nConnection must be opened before using this keyword.\n\n`username` is the username on the remote machine.\n\n`keyfile` is a path to a valid OpenSSH private key file on the local filesystem.\n\n`password` is used to unlock the `keyfile` if needed. If the keyfile is invalid a username-password authentication will be attempted.\n\n`proxy_cmd` is used to connect through a SSH proxy.\n\nThis keyword reads, returns and logs the server output after logging in. If the [prompt](#Prompt) is set, everything until the prompt is read. Otherwise the output is read using the [Read](#Read) keyword with the given `delay`. The output is logged using the default [log level](#Loglevel).\n\nExample that logs in using a private key and returns the output:\n\n```\nOpen Connection  linux.server.com    \n${output}=  Login With Public Key  johndoe  /home/johndoe/.ssh/id_rsa\nShould Contain  ${motd}  Last login at  \n```\n\nWith locked private keys, the keyring `password` is required:\n\n```\nOpen Connection  linux.server.com    \nLogin With Public Key  johndoe  /home/johndoe/.ssh/id_dsa  keyringpasswd\n```\n\n`allow_agent` enables the connection to the SSH agent. `look_for_keys` enables the searching for discoverable private key files in `~/.ssh/`.\n\n`allow_agent` and `look_for_keys` arguments are new in SSHLibrary 3.0.0.\n\n**Note:** `allow_agent`, `look_for_keys` and `proxy_cmd` do not work when using Jython."},{"name":"Open Connection","args":["host","alias=None","port=22","timeout=None","newline=None","prompt=None","term_type=None","width=None","height=None","path_separator=None","encoding=None","escape_ansi=None"],"doc":"Opens a new SSH connection to the given `host` and `port`.\n\nThe new connection is made active. Possible existing connections are left open in the background.\n\nNote that on Jython this keyword actually opens a connection and will fail immediately on unreachable hosts. On Python the actual connection attempt will not be done until [Login](#Login) is called.\n\nThis keyword returns the index of the new connection which can be used later to switch back to it. Indices start from `1` and are reset when [Close All Connections](#Close%20All%20Connections) is used.\n\nOptional `alias` can be given for the connection and can be used for switching between connections, similarly as the index. See [Switch Connection](#Switch%20Connection) for more details.\n\nConnection parameters, like [timeout](#Timeout) and [newline](#Newline) are documented in [configuration](#Configuration). If they are not defined as arguments, the library defaults are used for the connection.\n\nAll the arguments, except `host`, `alias` and `port` can be later updated with [Set Client Configuration](#Set%20Client%20Configuration).\n\nPort `22` is assumed by default:\n\n```\n${index}=  Open Connection  my.server.com\n```\n\nNon-standard port may be given as an argument:\n\n```\n${index}=  Open Connection  192.168.1.1  port=23\n```\n\nAliases are handy, if you need to switch back to the connection later:\n\n```\nOpen Connection  my.server.com  alias=myserver  \n# Do something with my.server.com      \nOpen Connection  192.168.1.1    \nSwitch Connection  myserver    # Back to my.server.com\n```\n\nSettings can be overridden per connection, otherwise the ones set on [library importing](#Importing) or with [Set Default Configuration](#Set%20Default%20Configuration) are used:\n\n```\nOpen Connection  192.168.1.1  timeout=1 hour  newline=CRLF\n# Do something with the connection      \nOpen Connection  my.server.com  # Default timeout  # Default line breaks\n```\n\nThe [terminal settings](#Terminal%20settings) are also configurable per connection:\n\n```\nOpen Connection  192.168.1.1  term_type=ansi  width=40\n```\n\nStarting with version 3.3.0, SSHLibrary understands `Host` entries from `~/.ssh/config`. For instance, if the config file contains:\n\n```\nHost  my_custom_hostname\n  Hostname my.server.com\n```\n\nThe connection to the server can also be made like this:\n\n```\nOpen connection  my_custom_hostname\n```\n\n`Host` entries are not read from config file when running with Jython."},{"name":"Put Directory","args":["source","destination=.","mode=0744","newline=","recursive=False","scp=OFF"],"doc":"Uploads a directory, including its content, from the local machine to the remote machine.\n\n`source` is the path on the local machine. Both absolute paths and paths relative to the current working directory are supported.\n\n`destination` is the target path on the remote machine. Both absolute paths and paths relative to the current working directory are supported.\n\n`mode` can be used to set the target file permission. Numeric values are accepted. The default value is `0744` (`-rwxr--r--`).\n\n`newline` can be used to force the line break characters that are written to the remote files. Valid values are `LF` and `CRLF`. Does not work if `scp` is enabled.\n\n`recursive` specifies whether to recursively upload all subdirectories inside `source`. Subdirectories are uploaded if the argument value evaluates to true (see [Boolean arguments](#Boolean%20arguments)).\n\n`scp` enables the use of scp (secure copy protocol) for the file transfer. See [Transfer files with SCP](#Transfer%20files%20with%20SCP) for more details.\n\nExamples:\n\n```\nPut Directory  /var/logs  /tmp  \nPut Directory  /var/logs  /tmp/non/existing  \nPut Directory  /var/logs    \nPut Directory  /var/logs  recursive=True  \nPut Directory  /var/logs  /home/groups/robot  mode=0770\nPut Directory  /var/logs  newline=CRLF  \n```\n\nThe remote `destination` is created as following:\n\n1\\. If `destination` is an existing path on the remote machine, `source` directory is uploaded into it.\n\n2\\. If `destination` does not exist on the remote machine, it is created and the content of `source` directory is uploaded into it.\n\n3\\. If `destination` is not given, `source` directory is typically uploaded to user's home directory on the remote machine.\n\nSee also [Put File](#Put%20File).\n\n`scp` is new in SSHLibrary 3.3.0."},{"name":"Put File","args":["source","destination=.","mode=0744","newline=","scp=OFF"],"doc":"Uploads file(s) from the local machine to the remote machine.\n\n`source` is the path on the local machine. Both absolute paths and paths relative to the current working directory are supported. If the source contains wildcards explained in [glob patterns](#Glob%20patterns), all files matching it are uploaded. In this case `destination` must always be a directory.\n\n`destination` is the target path on the remote machine. Both absolute paths and paths relative to the current working directory are supported.\n\n`mode` can be used to set the target file permission. Numeric values are accepted. The default value is `0744` (`-rwxr--r--`). If None value is provided, setting modes will be skipped.\n\n`newline` can be used to force the line break characters that are written to the remote files. Valid values are `LF` and `CRLF`. Does not work if `scp` is enabled.\n\n`scp` enables the use of scp (secure copy protocol) for the file transfer. See [Transfer files with SCP](#Transfer%20files%20with%20SCP) for more details.\n\nExamples:\n\n```\nPut File  /path/to/*.txt    \nPut File  /path/to/*.txt  /home/groups/robot  mode=0770\nPut File  /path/to/*.txt  /home/groups/robot  mode=None\nPut File  /path/to/*.txt  newline=CRLF  \n```\n\nThe remote `destination` is created as following:\n\n1\\. If `destination` is an existing file, `source` file is uploaded over it.\n\n2\\. If `destination` is an existing directory, `source` file is uploaded into it. Possible file with same name is overwritten.\n\n3\\. If `destination` does not exist and it ends with the [path separator](#Path%20separator), it is considered a directory. The directory is then created and `source` file uploaded into it. Possibly missing intermediate directories are also created.\n\n4\\. If `destination` does not exist and it does not end with the [path separator](#Path%20separator), it is considered a file. If the path to the file does not exist, it is created.\n\n5\\. If `destination` is not given, the user's home directory on the remote machine is used as the destination.\n\nSee also [Put Directory](#Put%20Directory).\n\n`scp` is new in SSHLibrary 3.3.0."},{"name":"Read","args":["loglevel=None","delay=None"],"doc":"Consumes and returns everything available on the server output.\n\nIf `delay` is given, this keyword waits that amount of time and reads output again. This wait-read cycle is repeated as long as further reads return more output or the default [timeout](#Timeout) expires. `delay` must be given in Robot Framework's [time format](#Time%20format).\n\nThis keyword is most useful for reading everything from the server output, thus clearing it.\n\nThe read output is logged. `loglevel` can be used to override the default [log level](#Loglevel).\n\nExample:\n\n```\nOpen Connection  my.server.com    \nLogin  johndoe  secretpasswd  \nWrite  sudo su -    \n${output}=  Read  delay=0.5s  \nShould Contain  ${output}  [sudo] password for johndoe:  \nWrite  secretpasswd    \n${output}=  Read  loglevel=WARN  # Shown in the console due to loglevel\nShould Contain  ${output}  root@  \n```\n\nSee [interactive shells](#Interactive%20shells) for more information about writing and reading in general."},{"name":"Read Command Output","args":["return_stdout=True","return_stderr=False","return_rc=False","timeout=None"],"doc":"Returns outputs of the most recent started command.\n\nAt least one command must have been started using [Start Command](#Start%20Command) before this keyword can be used.\n\nBy default, only the standard output of the started command is returned:\n\n```\nStart Command  echo 'Hello John!'  \n${stdout}=  Read Command Output  \nShould Contain  ${stdout}  Hello John!\n```\n\nArguments `return_stdout`, `return_stderr` and `return_rc` are used to specify, what is returned by this keyword. If several arguments evaluate to a true value (see [Boolean arguments](#Boolean%20arguments)), multiple values are returned.\n\nIf errors are needed as well, set the argument value to true:\n\n```\nStart Command  echo 'Hello John!'    \n${stdout}  ${stderr}=  Read Command Output  return_stderr=True\nShould Be Empty  ${stderr}    \n```\n\nOften checking the return code is enough:\n\n```\nStart Command  echo 'Hello John!'    \n${rc}=  Read Command Output  return_stdout=False  return_rc=True\nShould Be Equal As Integers  ${rc}  0  # succeeded\n```\n\nUsing [Start Command](#Start%20Command) and [Read Command Output](#Read%20Command%20Output) follows LIFO (last in, first out) policy, meaning that [Read Command Output](#Read%20Command%20Output) operates on the most recent started command, after which that command is discarded and its output cannot be read again.\n\nIf several commands have been started, the output of the last started command is returned. After that, a subsequent call will return the output of the new last (originally the second last) command:\n\n```\nStart Command  echo 'HELLO'  \nStart Command  echo 'SECOND'  \n${stdout}=  Read Command Output  \nShould Contain  ${stdout}  'SECOND'\n${stdout}=  Read Command Output  \nShould Contain  ${stdout}  'HELLO'\n```\n\nThis keyword logs the read command with log level `INFO`."},{"name":"Read Until","args":["expected","loglevel=None"],"doc":"Consumes and returns the server output until `expected` is encountered.\n\nText up until and including the `expected` will be returned.\n\nIf the [timeout](#Timeout) expires before the match is found, this keyword fails.\n\nThe read output is logged. `loglevel` can be used to override the default [log level](#Loglevel).\n\nExample:\n\n```\nOpen Connection  my.server.com  \nLogin  johndoe  ${PASSWORD}\nWrite  sudo su -  \n${output}=  Read Until  :\nShould Contain  ${output}  [sudo] password for johndoe:\nWrite  ${PASSWORD}  \n${output}=  Read Until  @\nShould End With  ${output}  root@\n```\n\nSee also [Read Until Prompt](#Read%20Until%20Prompt) and [Read Until Regexp](#Read%20Until%20Regexp) keywords. For more details about reading and writing in general, see the [Interactive shells](#Interactive%20shells) section."},{"name":"Read Until Prompt","args":["loglevel=None","strip_prompt=False"],"doc":"Consumes and returns the server output until the prompt is found.\n\nText up and until prompt is returned. The [prompt](#Prompt) must be set before this keyword is used.\n\nIf the [timeout](#Timeout) expires before the match is found, this keyword fails.\n\nThis keyword is useful for reading output of a single command when output of previous command has been read and that command does not produce prompt characters in its output.\n\nThe read output is logged. `loglevel` can be used to override the default [log level](#Loglevel).\n\nExample:\n\n```\nOpen Connection  my.server.com  prompt=$\nLogin  johndoe  ${PASSWORD}\nWrite  sudo su -  \nWrite  ${PASSWORD}  \nSet Client Configuration  prompt=#  # For root, the prompt is #\n${output}=  Read Until Prompt  \nShould End With  ${output}  root@myserver:~#\n```\n\nSee also [Read Until](#Read%20Until) and [Read Until Regexp](#Read%20Until%20Regexp) keywords. For more details about reading and writing in general, see the [Interactive shells](#Interactive%20shells) section.\n\nIf you want to exclude the prompt from the returned output, set `strip_prompt` to a true value (see [Boolean arguments](#Boolean%20arguments)). If your prompt is a regular expression, make sure that the expression spans the whole prompt, because only the part of the output that matches the regular expression is stripped away.\n\n`strip_prompt` argument is new in SSHLibrary 3.2.0."},{"name":"Read Until Regexp","args":["regexp","loglevel=None"],"doc":"Consumes and returns the server output until a match to `regexp` is found.\n\n`regexp` can be a regular expression pattern or a compiled regular expression object. See the [Regular expressions](#Regular%20expressions) section for more details about the syntax.\n\nText up until and including the `regexp` will be returned.\n\nIf the [timeout](#Timeout) expires before the match is found, this keyword fails.\n\nThe read output is logged. `loglevel` can be used to override the default [log level](#Loglevel).\n\nExample:\n\n```\nOpen Connection  my.server.com  \nLogin  johndoe  ${PASSWORD}\nWrite  sudo su -  \n${output}=  Read Until Regexp  \\\\[.*\\\\].*:\nShould Contain  ${output}  [sudo] password for johndoe:\nWrite  ${PASSWORD}  \n${output}=  Read Until Regexp  .*@\nShould Contain  ${output}  root@\n```\n\nSee also [Read Until](#Read%20Until) and [Read Until Prompt](#Read%20Until%20Prompt) keywords. For more details about reading and writing in general, see the [Interactive shells](#Interactive%20shells) section."},{"name":"Set Client Configuration","args":["timeout=None","newline=None","prompt=None","term_type=None","width=None","height=None","path_separator=None","encoding=None","escape_ansi=None"],"doc":"Update the [configuration](#Configuration) of the current connection.\n\nOnly parameters whose value is other than `None` are updated.\n\nIn the following example, [prompt](#Prompt) is set for the current connection. Other settings are left intact:\n\n```\nOpen Connection  my.server.com  \nSet Client Configuration  prompt=$  \n${myserver}=  Get Connection  \nShould Be Equal  ${myserver.prompt}  $\n```\n\nUsing keyword does not affect the other connections:\n\n```\nOpen Connection  linux.server.com    \nSet Client Configuration  prompt=$    # Only linux.server.com affected\nOpen Connection  windows.server.com    \nSet Client Configuration  prompt=>    # Only windows.server.com affected\n${linux}  ${windows}=  Get Connections  \nShould Be Equal  ${linux.prompt}  $  \nShould Be Equal  ${windows.prompt}  >  \n```\n\nMultiple settings are possible. This example updates the [terminal settings](#Terminal%20settings) of the current connection:\n\n```\nOpen Connection  192.168.1.1  \nSet Client Configuration  term_type=ansi  width=40\n```\n\n**Note:** Setting `width` and `height` does not work when using Jython."},{"name":"Set Default Configuration","args":["timeout=None","newline=None","prompt=None","loglevel=None","term_type=None","width=None","height=None","path_separator=None","encoding=None","escape_ansi=None"],"doc":"Update the default [configuration](#Configuration).\n\nPlease note that using this keyword does not affect the already opened connections. Use [Set Client Configuration](#Set%20Client%20Configuration) to configure the active connection.\n\nOnly parameters whose value is other than `None` are updated.\n\nThis example sets [prompt](#Prompt) to `$`:\n\n```\nSet Default Configuration  prompt=$\n```\n\nThis example sets [newline](#Newline) and [path separator](#Path%20separator) to the ones known by Windows:\n\n```\nSet Default Configuration  newline=CRLF  path_separator=\\\\\n```\n\nSometimes you might want to use longer [timeout](#Timeout) for all the subsequent connections without affecting the existing ones:\n\n```\nSet Default Configuration  timeout=5 seconds    \nOpen Connection  local.server.com    \nSet Default Configuration  timeout=20 seconds    \nOpen Connection  emea.server.com    \nOpen Connection  apac.server.com    \n${local}  ${emea}  ${apac}=  Get Connections\nShould Be Equal As Integers  ${local.timeout}  5  \nShould Be Equal As Integers  ${emea.timeout}  20  \nShould Be Equal As Integers  ${apac.timeout}  20  \n```"},{"name":"Start Command","args":["command","sudo=False","sudo_password=None","invoke_subsystem=False","forward_agent=False"],"doc":"Starts execution of the `command` on the remote machine and returns immediately.\n\nThis keyword returns nothing and does not wait for the `command` execution to be finished. If waiting for the output is required, use [Execute Command](#Execute%20Command) instead.\n\nThis keyword does not return any output generated by the started `command`. Use [Read Command Output](#Read%20Command%20Output) to read the output:\n\n```\nStart Command  echo 'Hello John!'  \n${stdout}=  Read Command Output  \nShould Contain  ${stdout}  Hello John!\n```\n\nThe `command` is always executed in a new shell, similarly as with [Execute Command](#Execute%20Command). Thus possible changes to the environment (e.g. changing working directory) are not visible to the later keywords:\n\n```\nStart Command  pwd  \n${pwd}=  Read Command Output  \nShould Be Equal  ${pwd}  /home/johndoe\nStart Command  cd /tmp  \nStart Command  pwd  \n${pwd}=  Read Command Output  \nShould Be Equal  ${pwd}  /home/johndoe\n```\n\nArguments `sudo` and `sudo_password` are used for executing commands within a sudo session. Due to different permission elevation in Cygwin, these two arguments will not when using it.\n\n```\nStart Command  pwd  sudo=True  sudo_password=test\n```\n\n[Write](#Write) and [Read](#Read) can be used for running multiple commands in the same shell. See [interactive shells](#Interactive%20shells) section for more information.\n\nThis keyword logs the started command with log level `INFO`.\n\n`invoke_subsystem` argument behaves similarly as with [Execute Command](#Execute%20Command) keyword.\n\n`forward_agent` argument behaves similarly as with [Execute Command](#Execute%20Command) keyword.\n\n`invoke_subsystem` is new in SSHLibrary 3.4.0."},{"name":"Switch Connection","args":["index_or_alias"],"doc":"Switches the active connection by index or alias.\n\n`index_or_alias` is either connection index (an integer) or alias (a string). Index is got as the return value of [Open Connection](#Open%20Connection). Alternatively, both index and alias can queried as attributes of the object returned by [Get Connection](#Get%20Connection).\n\nThis keyword returns the index of the previous active connection, which can be used to switch back to that connection later.\n\nExample:\n\n```\n${myserver}=  Open Connection  my.server.com  \nLogin  johndoe  secretpasswd  \nOpen Connection  build.local.net  alias=Build  \nLogin  jenkins  jenkins  \nSwitch Connection  ${myserver}    # Switch using index\n${username}=  Execute Command  whoami  # Executed on my.server.com\nShould Be Equal  ${username}  johndoe  \nSwitch Connection  Build    # Switch using alias\n${username}=  Execute Command  whoami  # Executed on build.local.net\nShould Be Equal  ${username}  jenkins  \n```"},{"name":"Write","args":["text","loglevel=None"],"doc":"Writes the given `text` on the remote machine and appends a newline.\n\nAppended [newline](#Newline) can be configured.\n\nThis keyword returns and consumes the written `text` (including the appended newline) from the server output. See the [Interactive shells](#Interactive%20shells) section for more information.\n\nThe written `text` is logged. `loglevel` can be used to override the default [log level](#Loglevel).\n\nExample:\n\n```\n${written}=  Write  su  \nShould Contain  ${written}  su  # Returns the consumed output\n${output}=  Read    \nShould Not Contain  ${output}  ${written}  # Was consumed from the output\nShould Contain  ${output}  Password:  \nWrite  invalidpasswd    \n${output}=  Read    \nShould Contain  ${output}  su: Authentication failure  \n```\n\nSee also [Write Bare](#Write%20Bare)."},{"name":"Write Bare","args":["text"],"doc":"Writes the given `text` on the remote machine without appending a newline.\n\nUnlike [Write](#Write), this keyword returns and consumes nothing. See the [Interactive shells](#Interactive%20shells) section for more information.\n\nExample:\n\n```\nWrite Bare  su\\n    \n${output}=  Read    \nShould Contain  ${output}  su  # Was not consumed from output\nShould Contain  ${output}  Password:  \nWrite Bare  invalidpasswd\\n    \n${output}=  Read    \nShould Contain  ${output}  su: Authentication failure  \n```\n\nSee also [Write](#Write)."},{"name":"Write Until Expected Output","args":["text","expected","timeout","retry_interval","loglevel=None"],"doc":"Writes the given `text` repeatedly until `expected` appears in the server output.\n\nThis keyword returns nothing.\n\n`text` is written without appending a newline and is consumed from the server output before `expected` is read. See more information on the [Interactive shells](#Interactive%20shells) section.\n\nIf `expected` does not appear in output within `timeout`, this keyword fails. `retry_interval` defines the time before writing `text` again. Both `timeout` and `retry_interval` must be given in Robot Framework's [time format](#Time%20format).\n\nThe written `text` is logged. `loglevel` can be used to override the default [log level](#Loglevel).\n\nThis example will write `lsof -c python27\\n` (list all files currently opened by Python 2.7), until `myscript.py` appears in the output. The command is written every 0.5 seconds. The keyword fails if `myscript.py` does not appear in the server output in 5 seconds:\n\n```\nWrite Until Expected Output  lsof -c python27\\n  expected=myscript.py  timeout=5s  retry_interval=0.5s\n```"}]}