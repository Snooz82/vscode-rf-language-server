{"name":"DatabaseLibrary","version":"","keywords":[{"name":"Call Stored Procedure","args":["spName","spParams=None","sansTran=False"],"doc":"Uses the inputs of spName and 'spParams' to call a stored procedure. Set optional input sansTran to True to run command without an explicit transaction commit or rollback.\n\nspName should be the stored procedure name itself spParams \\[Optional\\] should be a List of the parameters being sent in. The list can be one or multiple items.\n\nThe return from this keyword will always be a list.\n\nExample:\n\n```\n@{ParamList} =  Create List  FirstParam  SecondParam  ThirdParam\n@{QueryResults} =  Call Stored Procedure  DBName.SchemaName.StoredProcName  List of Parameters  \n```\n\nExample:\n\n```\n@{ParamList} =  Create List  Testing  LastName\nSet Test Variable  ${SPName} =  DBTest.DBSchema.MyStoredProc  \n@{QueryResults} =  Call Stored Procedure  ${SPName}  ${ParamList}\nLog List  @{QueryResults}    \n```\n\nUsing optional sansTran to run command without an explicit transaction commit or rollback:\n\n```\n@{QueryResults} =  Call Stored Procedure  DBName.SchemaName.StoredProcName  List of Parameters  True\n```"},{"name":"Check If Exists In Database","args":["selectStatement","sansTran=False"],"doc":"Check if any row would be returned by given the input selectStatement. If there are no results, then this will throw an AssertionError. Set optional input sansTran to True to run command without an explicit transaction commit or rollback.\n\nFor example, given we have a table person with the following data:\n\n```\nid  first_name  last_name\n1  Franz Allan  See\n```\n\nWhen you have the following assertions in your robot\n\n```\nCheck If Exists In Database  SELECT id FROM person WHERE first_name = 'Franz Allan'\nCheck If Exists In Database  SELECT id FROM person WHERE first_name = 'John'\n```\n\nThen you will get the following:\n\n```\nCheck If Exists In Database  SELECT id FROM person WHERE first_name = 'Franz Allan'  # PASS\nCheck If Exists In Database  SELECT id FROM person WHERE first_name = 'John'  # FAIL\n```\n\nUsing optional sansTran to run command without an explicit transaction commit or rollback:\n\n```\nCheck If Exists In Database  SELECT id FROM person WHERE first_name = 'John'  True\n```"},{"name":"Check If Not Exists In Database","args":["selectStatement","sansTran=False"],"doc":"This is the negation of check\\_if\\_exists\\_in\\_database.\n\nCheck if no rows would be returned by given the input selectStatement. If there are any results, then this will throw an AssertionError. Set optional input sansTran to True to run command without an explicit transaction commit or rollback.\n\nFor example, given we have a table person with the following data:\n\n```\nid  first_name  last_name\n1  Franz Allan  See\n```\n\nWhen you have the following assertions in your robot\n\n```\nCheck If Not Exists In Database  SELECT id FROM person WHERE first_name = 'John'\nCheck If Not Exists In Database  SELECT id FROM person WHERE first_name = 'Franz Allan'\n```\n\nThen you will get the following:\n\n```\nCheck If Not Exists In Database  SELECT id FROM person WHERE first_name = 'John'  # PASS\nCheck If Not Exists In Database  SELECT id FROM person WHERE first_name = 'Franz Allan'  # FAIL\n```\n\nUsing optional sansTran to run command without an explicit transaction commit or rollback:\n\n```\nCheck If Not Exists In Database  SELECT id FROM person WHERE first_name = 'John'  True\n```"},{"name":"Connect To Database","args":["dbapiModuleName=None","dbName=None","dbUsername=None","dbPassword=None","dbHost=None","dbPort=None","dbCharset=None","dbConfigFile=./resources/db.cfg"],"doc":"Loads the DB API 2.0 module given dbapiModuleName then uses it to connect to the database using dbName, dbUsername, and dbPassword.\n\nOptionally, you can specify a dbConfigFile wherein it will load the default property values for dbapiModuleName, dbName dbUsername and dbPassword (note: specifying dbapiModuleName, dbName dbUsername or dbPassword directly will override the properties of the same key in dbConfigFile). If no dbConfigFile is specified, it defaults to ./resources/db.cfg.\n\nThe dbConfigFile is useful if you don't want to check into your SCM your database credentials.\n\nExample db.cfg file\n\n\\[default\\]\ndbapiModuleName=pymysqlforexample\ndbName=yourdbname\ndbUsername=yourusername\ndbPassword=yourpassword\ndbHost=yourhost\ndbPort=yourport\n\nExample usage:\n\n```\n# explicitly specifies all db property values            \nConnect To Database  psycopg2  my_db  postgres  s3cr3t  tiger.foobar.com  5432\n``````\n# loads all property values from default.cfg  \nConnect To Database  dbConfigFile=default.cfg\n``````\n# loads all property values from ./resources/db.cfg\nConnect To Database\n``````\n# uses explicit dbapiModuleName and dbName but uses the dbUsername and dbPassword in 'default.cfg'      \nConnect To Database  psycopg2  my_db_test  dbConfigFile=default.cfg\n``````\n# uses explicit dbapiModuleName and dbName but uses the dbUsername and dbPassword in './resources/db.cfg'    \nConnect To Database  psycopg2  my_db_test\n```"},{"name":"Connect To Database Using Custom Params","args":["dbapiModuleName=None","db_connect_string="],"doc":"Loads the DB API 2.0 module given dbapiModuleName then uses it to connect to the database using the map string db\\_custom\\_param\\_string.\n\nExample usage:\n\n```\n# for psycopg2    \nConnect To Database Using Custom Params  psycopg2  database='my_db_test', user='postgres', password='s3cr3t', host='tiger.foobar.com', port=5432\n``````\n# for JayDeBeApi    \nConnect To Database Using Custom Params  JayDeBeApi  'oracle.jdbc.driver.OracleDriver', 'my_db_test', 'system', 's3cr3t'\n```"},{"name":"Delete All Rows From Table","args":["tableName","sansTran=False"],"doc":"Delete all the rows within a given table. Set optional input sansTran to True to run command without an explicit transaction commit or rollback.\n\nFor example, given we have a table person in a database\n\nWhen you do the following:\n\n```\nDelete All Rows From Table  person\n```\n\nIf all the rows can be successfully deleted, then you will get:\n\n```\nDelete All Rows From Table  person  # PASS\n```\n\nIf the table doesn't exist or all the data can't be deleted, then you will get:\n\n```\nDelete All Rows From Table  first_name  # FAIL\n```\n\nUsing optional sansTran to run command without an explicit transaction commit or rollback:\n\n```\nDelete All Rows From Table  person  True\n```"},{"name":"Description","args":["selectStatement","sansTran=False"],"doc":"Uses the input selectStatement to query a table in the db which will be used to determine the description. Set optional input sansTran to True to run command without an explicit transaction commit or rollback.\n\nFor example, given we have a table person with the following data:\n\n```\nid  first_name  last_name\n1  Franz Allan  See\n```\n\nWhen you do the following:\n\n```\n@{queryResults}  Description  SELECT * FROM person\nLog Many  @{queryResults}  \n```\n\nYou will get the following: \\[Column(name='id', type\\_code=1043, display\\_size=None, internal\\_size=255, precision=None, scale=None, null\\_ok=None)\\] \\[Column(name='first\\_name', type\\_code=1043, display\\_size=None, internal\\_size=255, precision=None, scale=None, null\\_ok=None)\\] \\[Column(name='last\\_name', type\\_code=1043, display\\_size=None, internal\\_size=255, precision=None, scale=None, null\\_ok=None)\\]\n\nUsing optional sansTran to run command without an explicit transaction commit or rollback:\n\n```\n@{queryResults}  Description  SELECT * FROM person  True\n```"},{"name":"Disconnect From Database","args":[],"doc":"Disconnects from the database.\n\nFor example:\n\n```\nDisconnect From Database  # disconnects from current connection to the database\n```"},{"name":"Execute Sql Script","args":["sqlScriptFileName","sansTran=False"],"doc":"Executes the content of the sqlScriptFileName as SQL commands. Useful for setting the database to a known state before running your tests, or clearing out your test data after running each a test. Set optional input sansTran to True to run command without an explicit transaction commit or rollback.\n\nSample usage :\n\n```\nExecute Sql Script  ${EXECDIR}${/}resources${/}DDL-setup.sql\nExecute Sql Script  ${EXECDIR}${/}resources${/}DML-setup.sql\n#interesting stuff here  \nExecute Sql Script  ${EXECDIR}${/}resources${/}DML-teardown.sql\nExecute Sql Script  ${EXECDIR}${/}resources${/}DDL-teardown.sql\n```\n\nSQL commands are expected to be delimited by a semi-colon (';').\n\nFor example: DELETE FROM person\\_employee\\_table; DELETE FROM person\\_table; DELETE FROM employee\\_table;\n\nAlso, the last SQL command can optionally omit its trailing semi-colon.\n\nFor example: DELETE FROM person\\_employee\\_table; DELETE FROM person\\_table; DELETE FROM employee\\_table\n\nGiven this, that means you can create spread your SQL commands in several lines.\n\nFor example: DELETE FROM person\\_employee\\_table; DELETE FROM person\\_table; DELETE FROM employee\\_table\n\nHowever, lines that starts with a number sign (#) are treated as a commented line. Thus, none of the contents of that line will be executed.\n\nFor example: # Delete the bridging table first... DELETE FROM person\\_employee\\_table; # ...and then the bridged tables. DELETE FROM person\\_table; DELETE FROM employee\\_table\n\nUsing optional sansTran to run command without an explicit transaction commit or rollback:\n\n```\nExecute Sql Script  ${EXECDIR}${/}resources${/}DDL-setup.sql  True\n```"},{"name":"Execute Sql String","args":["sqlString","sansTran=False"],"doc":"Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input sansTran to True to run command without an explicit transaction commit or rollback.\n\nSQL commands are expected to be delimited by a semi-colon (';').\n\nFor example:\n\n```\nExecute Sql String  DELETE FROM person_employee_table; DELETE FROM person_table\n```\n\nFor example with an argument:\n\n```\nExecute Sql String  SELECT * FROM person WHERE first_name = ${FIRSTNAME}\n```\n\nUsing optional sansTran to run command without an explicit transaction commit or rollback:\n\n```\nExecute Sql String  DELETE FROM person_employee_table; DELETE FROM person_table  True\n```"},{"name":"Query","args":["selectStatement","sansTran=False","returnAsDict=False"],"doc":"Uses the input selectStatement to query for the values that will be returned as a list of tuples. Set optional input sansTran to True to run command without an explicit transaction commit or rollback. Set optional input returnAsDict to True to return values as a list of dictionaries.\n\nTip: Unless you want to log all column values of the specified rows, try specifying the column names in your select statements as much as possible to prevent any unnecessary surprises with schema changes and to easily see what your \\[\\] indexing is trying to retrieve (i.e. instead of \"select \\* from my\\_table\", try \"select id, col\\_1, col\\_2 from my\\_table\").\n\nFor example, given we have a table person with the following data:\n\n```\nid  first_name  last_name\n1  Franz Allan  See\n```\n\nWhen you do the following:\n\n```\n@{queryResults}  Query  SELECT * FROM person\nLog Many  @{queryResults}  \n```\n\nYou will get the following: \\[1, 'Franz Allan', 'See'\\]\n\nAlso, you can do something like this:\n\n```\n${queryResults}  Query  SELECT first_name, last_name FROM person\nLog  ${queryResults[0][1]}, ${queryResults[0][0]}  \n```\n\nAnd get the following See, Franz Allan\n\nUsing optional sansTran to run command without an explicit transaction commit or rollback:\n\n```\n@{queryResults}  Query  SELECT * FROM person  True\n```"},{"name":"Row Count","args":["selectStatement","sansTran=False"],"doc":"Uses the input selectStatement to query the database and returns the number of rows from the query. Set optional input sansTran to True to run command without an explicit transaction commit or rollback.\n\nFor example, given we have a table person with the following data:\n\n```\nid  first_name  last_name\n1  Franz Allan  See\n2  Jerry  Schneider\n```\n\nWhen you do the following:\n\n```\n${rowCount}  Row Count  SELECT * FROM person\nLog  ${rowCount}  \n```\n\nYou will get the following: 2\n\nAlso, you can do something like this:\n\n```\n${rowCount}  Row Count  SELECT * FROM person WHERE id = 2\nLog  ${rowCount}  \n```\n\nAnd get the following 1\n\nUsing optional sansTran to run command without an explicit transaction commit or rollback:\n\n```\n${rowCount}  Row Count  SELECT * FROM person  True\n```"},{"name":"Row Count Is 0","args":["selectStatement","sansTran=False"],"doc":"Check if any rows are returned from the submitted selectStatement. If there are, then this will throw an AssertionError. Set optional input sansTran to True to run command without an explicit transaction commit or rollback.\n\nFor example, given we have a table person with the following data:\n\n```\nid  first_name  last_name\n1  Franz Allan  See\n```\n\nWhen you have the following assertions in your robot\n\n```\nRow Count is 0  SELECT id FROM person WHERE first_name = 'Franz Allan'\nRow Count is 0  SELECT id FROM person WHERE first_name = 'John'\n```\n\nThen you will get the following:\n\n```\nRow Count is 0  SELECT id FROM person WHERE first_name = 'Franz Allan'  # FAIL\nRow Count is 0  SELECT id FROM person WHERE first_name = 'John'  # PASS\n```\n\nUsing optional sansTran to run command without an explicit transaction commit or rollback:\n\n```\nRow Count is 0  SELECT id FROM person WHERE first_name = 'John'  True\n```"},{"name":"Row Count Is Equal To X","args":["selectStatement","numRows","sansTran=False"],"doc":"Check if the number of rows returned from selectStatement is equal to the value submitted. If not, then this will throw an AssertionError. Set optional input sansTran to True to run command without an explicit transaction commit or rollback.\n\nFor example, given we have a table person with the following data:\n\n```\nid  first_name  last_name\n1  Franz Allan  See\n2  Jerry  Schneider\n```\n\nWhen you have the following assertions in your robot\n\n```\nRow Count Is Equal To X  SELECT id FROM person  1\nRow Count Is Equal To X  SELECT id FROM person WHERE first_name = 'John'  0\n```\n\nThen you will get the following:\n\n```\nRow Count Is Equal To X  SELECT id FROM person  1  # FAIL\nRow Count Is Equal To X  SELECT id FROM person WHERE first_name = 'John'  0  # PASS\n```\n\nUsing optional sansTran to run command without an explicit transaction commit or rollback:\n\n```\nRow Count Is Equal To X  SELECT id FROM person WHERE first_name = 'John'  0  True\n```"},{"name":"Row Count Is Greater Than X","args":["selectStatement","numRows","sansTran=False"],"doc":"Check if the number of rows returned from selectStatement is greater than the value submitted. If not, then this will throw an AssertionError. Set optional input sansTran to True to run command without an explicit transaction commit or rollback.\n\nFor example, given we have a table person with the following data:\n\n```\nid  first_name  last_name\n1  Franz Allan  See\n2  Jerry  Schneider\n```\n\nWhen you have the following assertions in your robot\n\n```\nRow Count Is Greater Than X  SELECT id FROM person  1\nRow Count Is Greater Than X  SELECT id FROM person WHERE first_name = 'John'  0\n```\n\nThen you will get the following:\n\n```\nRow Count Is Greater Than X  SELECT id FROM person  1  # PASS\nRow Count Is Greater Than X  SELECT id FROM person WHERE first_name = 'John'  0  # FAIL\n```\n\nUsing optional sansTran to run command without an explicit transaction commit or rollback:\n\n```\nRow Count Is Greater Than X  SELECT id FROM person  1  True\n```"},{"name":"Row Count Is Less Than X","args":["selectStatement","numRows","sansTran=False"],"doc":"Check if the number of rows returned from selectStatement is less than the value submitted. If not, then this will throw an AssertionError. Set optional input sansTran to True to run command without an explicit transaction commit or rollback.\n\nFor example, given we have a table person with the following data:\n\n```\nid  first_name  last_name\n1  Franz Allan  See\n2  Jerry  Schneider\n```\n\nWhen you have the following assertions in your robot\n\n```\nRow Count Is Less Than X  SELECT id FROM person  3\nRow Count Is Less Than X  SELECT id FROM person WHERE first_name = 'John'  1\n```\n\nThen you will get the following:\n\n```\nRow Count Is Less Than X  SELECT id FROM person  3  # PASS\nRow Count Is Less Than X  SELECT id FROM person WHERE first_name = 'John'  1  # FAIL\n```\n\nUsing optional sansTran to run command without an explicit transaction commit or rollback:\n\n```\nRow Count Is Less Than X  SELECT id FROM person  3  True\n```"},{"name":"Set Auto Commit","args":["autoCommit=True"],"doc":"Turn the autocommit on the database connection ON or OFF.\n\nThe default behaviour on a newly created database connection is to automatically start a transaction, which means that database actions that won't work if there is an active transaction will fail. Common examples of these actions are creating or deleting a database or database snapshot. By turning on auto commit on the database connection these actions can be performed.\n\nExample:\n\n\\# Default behaviour, sets auto commit to true\nSet Auto Commit\n# Explicitly set the desired state\nSet Auto Commit | False"},{"name":"Table Must Exist","args":["tableName","sansTran=False"],"doc":"Check if the table given exists in the database. Set optional input sansTran to True to run command without an explicit transaction commit or rollback.\n\nFor example, given we have a table person in a database\n\nWhen you do the following:\n\n```\nTable Must Exist  person\n```\n\nThen you will get the following:\n\n```\nTable Must Exist  person  # PASS\nTable Must Exist  first_name  # FAIL\n```\n\nUsing optional sansTran to run command without an explicit transaction commit or rollback:\n\n```\nTable Must Exist  person  True\n```"}]}