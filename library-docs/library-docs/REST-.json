{"name":"REST","version":"","keywords":[{"name":"Array","args":["field","*enum","**validations"],"doc":"**Asserts the field as JSON array.**\n\nThe field consists of parts separated by spaces, the parts being object property names or array indices starting from 0, and the root being the instance created by the last request (see [Output](#Output) for it).\n\nFor asserting deeply nested properties or multiple objects at once, [JSONPath](http://goessner.net/articles/JsonPath) can be used with [supported JSONPath expressions](https://github.com/h2non/jsonpath-ng#jsonpath-syntax), the root being the response body.\n\n**Enum**\n\nThe allowed values for the property as zero or more arguments. If none given, the value of the property is not asserted.\n\n**Validations**\n\nThe JSON Schema validation keywords [for array](https://json-schema.org/understanding-json-schema/reference/array.html) can be used. Validations are optional but update the schema of the property (more accurate) if given. [Output Schema](#Output%20Schema) can be used for the current schema of the field.\n\nThe keyword will fail if any of the given validations fail. Given validations can be skipped altogether by adding `skip=true`. When skipped, the schema is updated but the validations are not ran. Skip is intented mainly for debugging the updated schema before aborting.\n\n**Examples**\n\n```\nGET  /users?_limit=10        # https://jsonplaceholder.typicode.com/users\nArray  response body        \nArray  $        # same as above\nArray  $  minItems=1  maxItems=10  uniqueItems=true  \n```"},{"name":"Boolean","args":["field","value=None","**validations"],"doc":"**Asserts the field as JSON boolean.**\n\nThe field consists of parts separated by spaces, the parts being object property names or array indices starting from 0, and the root being the instance created by the last request (see [Output](#Output) for it).\n\nFor asserting deeply nested properties or multiple objects at once, [JSONPath](http://goessner.net/articles/JsonPath) can be used with [supported JSONPath expressions](https://github.com/h2non/jsonpath-ng#jsonpath-syntax), the root being the response body.\n\n**Value**\n\nIf given, the property value is validated in addition to the type.\n\n**Validations**\n\nThe JSON Schema validation keywords [common for all types](https://json-schema.org/understanding-json-schema/reference/generic.html) can be used. Validations are optional but update the schema of the property (more accurate) if given. [Output Schema](#Output%20Schema) can be used for the current schema of the field.\n\nThe keyword will fail if any of the given validations fail. Given validations can be skipped altogether by adding `skip=true`. When skipped, the schema is updated but the validations are not ran. Skip is intented mainly for debugging the updated schema before aborting.\n\n**Examples**\n\n```\nPUT  /users/1  { \"verified_email\": true }      # https://jsonplaceholder.typicode.com/users/1\nBoolean  response body verified_email        # value is optional\nBoolean  response body verified_email  true      \nBoolean  response body verified_email  ${True}      # same as above\nBoolean  $.verified_email  true      # JSONPath alternative\nBoolean  $.verified_email  true  enum=[1, \"1\"]  skip=true  # would pass\n```"},{"name":"Clear Expectations","args":[],"doc":"**Resets the expectations for both request and response.**\n\nUsing this keyword resets any expectations set with keywords [Expect Response](#Expect%20Response), [Expect Response Body](#Expect%20Response%20Body) and [Expect Request](#Expect%20Request)."},{"name":"Delete","args":["endpoint","timeout=None","allow_redirects=None","validate=True","headers=None"],"doc":"**Sends a DELETE request to the endpoint.**\n\nThe endpoint is joined with the URL given on library init (if any). If endpoint starts with `http://` or `https://`, it is assumed an URL outside the tested API (which may affect logging).\n\n**Options**\n\n`timeout`: A number of seconds to wait for the response before failing the keyword.\n\n`allow_redirects`: If false, do not follow any redirects.\n\n`validate`: If false, skips any request and response validations set by expectation keywords and a spec given on library init.\n\n`headers`: Headers as a JSON object to add or override for the request.\n\n**Examples**\n\n```\nDELETE  /users/6  \nDELETE  http://localhost:8273/state  validate=false\n```"},{"name":"Expect Request","args":["schema","merge=False"],"doc":"**Sets the schema to validate the request properties**\n\nExpectations are effective for following requests in the test suite, or until they are reset or updated by using expectation keywords again. On the test suite level (suite setup), they are best used for expecting the endpoint wide properties that are common regardless of the tested HTTP method, and on the test case level (test setup) to merge in the HTTP method specific properties.\n\n[Expect Request](#Expect%20Request) is intented to be used with tests that have some of the request properties, e.g. body or query parameters, randomized (\"fuzzing\") for validating that the sent values are within the expected scope.\n\nIf the keyword is used, following HTTP keywords will fail when their request properties are not valid against the expected schema.\n\nIf the keyword is not used, a new schema is generated for each following request for its `body` and `query` properties. Use [Output Schema](#Output%20Schema) to output it and use it as an input to this keyword.\n\n**Options**\n\n`merge`: Merges the new schema with the current instead of replacing it\n\n**Examples**\n\n```\nExpect Request  ${CURDIR}/valid_payload.json    # See Output Schema\nExpect Request  { \"body\": { \"required\": [\"id\"] } }  merge=true  \n```"},{"name":"Expect Response","args":["schema","merge=False"],"doc":"**Sets the schema to validate the response properties.**\n\nExpectations are effective for following requests in the test suite, or until they are reset or updated by using expectation keywords again. On the test suite level (suite setup), they are best used for expecting the endpoint wide properties that are common regardless of the tested HTTP method, and on the test case level (test setup) to merge in the HTTP method specific properties.\n\n[Expect Response](#Expect%20Response) is intented to be used on the suite level to validate the endpoint properties that hold regardless of the HTTP method, such as body property types, responded headers, authentication, etc.\n\nIf the keyword is used, following HTTP keywords will fail when their response properties are not valid against the expected schema.\n\nIf the keyword is not used, a new schema is inferred for each following response for its `body`. Use [Output Schema](#Output%20Schema) to output it and use it as an input to this keyword.\n\n**Options**\n\n`merge`: Merges the new schema with the current instead of replacing it\n\n**Examples**\n\n```\nExpect Response  ${CURDIR}/endpoint_data_model.json    # See Output Schema\nExpect Response  { \"headers\": { \"required\": [\"Via\"] } }  merge=true  \nExpect Response  { \"seconds\": { \"maximum\": \"1.0\" } }  merge=true  \n```"},{"name":"Expect Response Body","args":["schema"],"doc":"**Updates the schema to validate the response body properties.**\n\nExpectations are effective for following requests in the test suite, or until they are reset or updated by using expectation keywords again. On the test suite level (suite setup), they are best used for expecting the endpoint wide properties that are common regardless of the tested HTTP method, and on the test case level (test setup) to merge in the HTTP method specific properties.\n\n[Expect Response Body](#Expect%20Response%20Body) is intented to be used on the test case level, to validate that the response body has the expected properties for the particular HTTP method. Note that if something about response body has been already expected with Expected Response, using this keyword updates the expectations in terms of given response body properties.\n\nIf the keyword is used, following HTTP keywords will fail if their response body is not valid against the expected schema.\n\nIf the keyword is not used, and no schema is already expected with [Expect Response](#Expect%20Response) for response `body`, a new schema is inferred for it. Use [Output Schema](#Output%20Schema) to output it and use it as an input to this keyword.\n\n**Tips**\n\nRegardless whether the HTTP method returns one (an object) or many (an array of objects), the validation of the object property types and features can usually be done to some extent on the test suite level with [Expect Response](#Expect%20Response), then extended on the test case level using this keyword. This helps in ensuring that the data model is unified between the different HTTP methods.\n\n**Examples**\n\n```\nExpect Response Body  ${CURDIR}/user_properties.json  # See Output Schema\nExpect Response Body  { \"required\": [\"id\", \"token\"] }  # Only these are required from this method\nExpect Response Body  { \"additionalProperties\": false }  # Nothing extra should be responded by this method\n```"},{"name":"Get","args":["endpoint","query=None","timeout=None","allow_redirects=None","validate=True","headers=None"],"doc":"**Sends a GET request to the endpoint.**\n\nThe endpoint is joined with the URL given on library init (if any). If endpoint starts with `http://` or `https://`, it is assumed an URL outside the tested API (which may affect logging).\n\n**Options**\n\n`query`: Request query parameters as a JSON object or a dictionary. Alternatively, query parameters can be given as part of endpoint as well.\n\n`timeout`: A number of seconds to wait for the response before failing the keyword.\n\n`allow_redirects`: If false, do not follow any redirects.\n\n`validate`: If false, skips any request and response validations set by expectation keywords and a spec given on library init.\n\n`headers`: Headers as a JSON object to add or override for the request.\n\n**Examples**\n\n```\nGET  /users/1  \nGET  /users  timeout=2.5\nGET  /users?_limit=2  \nGET  /users  _limit=2\nGET  /users  { \"_limit\": \"2\" }\nGET  https://jsonplaceholder.typicode.com/users  headers={ \"Authentication\": \"\" }\n```"},{"name":"Head","args":["endpoint","timeout=None","allow_redirects=None","validate=True","headers=None"],"doc":"**Sends a HEAD request to the endpoint.**\n\nThe endpoint is joined with the URL given on library init (if any). If endpoint starts with `http://` or `https://`, it is assumed an URL outside the tested API (which may affect logging).\n\n**Options**\n\n`timeout`: A number of seconds to wait for the response before failing the keyword.\n\n`allow_redirects`: If true, follow all redirects. In contrary to other methods, no HEAD redirects are followed by default.\n\n`validate`: If false, skips any request and response validations set by expectation keywords and a spec given on library init.\n\n`headers`: The headers to add or override for this request.\n\n**Examples**\n\n```\nHEAD  /users/1  \nHEAD  /users/1  timeout=0.5\n```"},{"name":"Input","args":["what"],"doc":"**Converts the input to JSON and returns it.**\n\nAny of the following is accepted:\n\n*   The path to JSON file\n*   Any scalar that can be interpreted as JSON\n*   A dictionary or a list\n\n**Examples**\n\n```\n${payload}  Input  ${CURDIR}/payload.json\n``````\n${object}  Input  { \"name\": \"Julie Langford\", \"username\": \"jlangfor\" }\n${object}  Input  ${dict}\n``````\n${array}  Input  [\"name\", \"username\"]\n${array}  Input  ${list}\n``````\n${boolean}  Input  true\n${boolean}  Input  ${True}\n``````\n${number}  Input  2.0\n${number}  Input  ${2.0}\n``````\n${string}  Input  Quotes are optional for strings\n```"},{"name":"Integer","args":["field","*enum","**validations"],"doc":"**Asserts the field as JSON integer.**\n\nThe field consists of parts separated by spaces, the parts being object property names or array indices starting from 0, and the root being the instance created by the last request (see [Output](#Output) for it).\n\nFor asserting deeply nested properties or multiple objects at once, [JSONPath](http://goessner.net/articles/JsonPath) can be used with [supported JSONPath expressions](https://github.com/h2non/jsonpath-ng#jsonpath-syntax), the root being the response body.\n\n**Enum**\n\nThe allowed values for the property as zero or more arguments. If none given, the value of the property is not asserted.\n\n**Validations**\n\nThe JSON Schema validation keywords [for numeric types](https://json-schema.org/understanding-json-schema/reference/numeric.html#integer) can be used. Validations are optional but update the schema of the property (more accurate) if given. [Output Schema](#Output%20Schema) can be used for the current schema of the field.\n\nThe keyword will fail if any of the given validations fail. Given validations can be skipped altogether by adding `skip=true`. When skipped, the schema is updated but the validations are not ran. Skip is intented mainly for debugging the updated schema before aborting.\n\n**Examples**\n\n```\nGET  /users/1    # https://jsonplaceholder.typicode.com/users/1\nInteger  response body id    # value is optional\nInteger  response body id  1  \nInteger  response body id  ${1}  # same as above\nInteger  $.id  1  # JSONPath alternative\n``````\nGET  /users?_limit=10        # https://jsonplaceholder.typicode.com/users\nInteger  response body 0 id  1      \nInteger  $[0].id  1      # same as above\nInteger  $[*].id    minimum=1  maximum=10  \n```"},{"name":"Missing","args":["field"],"doc":"**Asserts the field does not exist.**\n\nThe field consists of parts separated by spaces, the parts being object property names or array indices starting from 0, and the root being the instance created by the last request (see [Output](#Output) for it).\n\nFor asserting deeply nested properties or multiple objects at once, [JSONPath](http://goessner.net/articles/JsonPath) can be used with [supported JSONPath expressions](https://github.com/h2non/jsonpath-ng#jsonpath-syntax), the root being the response body.\n\n**Examples**\n\n```\nGET  /users/1  # https://jsonplaceholder.typicode.com/users/1\nMissing  response body password  \nMissing  $.password  \nMissing  $..geo.elevation  # response body address geo elevation\n``````\nGET  /users  # https://jsonplaceholder.typicode.com/users\nMissing  response body 0 password  \nMissing  $[*].password  \nMissing  $[*]..geo.elevation  \n```"},{"name":"Null","args":["field","**validations"],"doc":"**Asserts the field as JSON null.**\n\nThe field consists of parts separated by spaces, the parts being object property names or array indices starting from 0, and the root being the instance created by the last request (see [Output](#Output) for it).\n\nFor asserting deeply nested properties or multiple objects at once, [JSONPath](http://goessner.net/articles/JsonPath) can be used with [supported JSONPath expressions](https://github.com/h2non/jsonpath-ng#jsonpath-syntax), the root being the response body.\n\n**Validations**\n\nThe JSON Schema validation keywords [common for all types](https://json-schema.org/understanding-json-schema/reference/generic.html) can be used. Validations are optional but update the schema of the property (more accurate) if given. [Output Schema](#Output%20Schema) can be used for the current schema of the field.\n\nThe keyword will fail if any of the given validations fail. Given validations can be skipped altogether by adding `skip=true`. When skipped, the schema is updated but the validations are not ran. Skip is intented mainly for debugging the updated schema before aborting.\n\n**Examples**\n\n```\nPUT  /users/1  { \"deactivated_at\": null }  # https://jsonplaceholder.typicode.com/users/1\nNull  response body deactivated_at    \nNull  $.deactivated_at    # JSONPath alternative\n```"},{"name":"Number","args":["field","*enum","**validations"],"doc":"**Asserts the field as JSON number.**\n\nThe field consists of parts separated by spaces, the parts being object property names or array indices starting from 0, and the root being the instance created by the last request (see [Output](#Output) for it).\n\nFor asserting deeply nested properties or multiple objects at once, [JSONPath](http://goessner.net/articles/JsonPath) can be used with [supported JSONPath expressions](https://github.com/h2non/jsonpath-ng#jsonpath-syntax), the root being the response body.\n\n**Enum**\n\nThe allowed values for the property as zero or more arguments. If none given, the value of the property is not asserted.\n\n**Validations**\n\nThe JSON Schema validation keywords [for numeric types](https://json-schema.org/understanding-json-schema/reference/numeric.html#number) can be used. Validations are optional but update the schema of the property (more accurate) if given. [Output Schema](#Output%20Schema) can be used for the current schema of the field.\n\nThe keyword will fail if any of the given validations fail. Given validations can be skipped altogether by adding `skip=true`. When skipped, the schema is updated but the validations are not ran. Skip is intented mainly for debugging the updated schema before aborting.\n\n**Examples**\n\n```\nPUT  /users/1  { \"allocation\": 95.0 }  # https://jsonplaceholder.typicode.com/users/1\nNumber  response body allocation    # value is optional\nNumber  response body allocation  95.0  \nNumber  response body allocation  ${95.0}  # same as above\nNumber  $.allocation  95.0  # JSONPath alternative\n``````\nGET  /users?_limit=10        # https://jsonplaceholder.typicode.com/users\nNumber  $[0].id  1      # integers are also numbers\nNumber  $[*].id    minimum=1  maximum=10  \n```"},{"name":"Object","args":["field","*enum","**validations"],"doc":"**Asserts the field as JSON object.**\n\nThe field consists of parts separated by spaces, the parts being object property names or array indices starting from 0, and the root being the instance created by the last request (see [Output](#Output) for it).\n\nFor asserting deeply nested properties or multiple objects at once, [JSONPath](http://goessner.net/articles/JsonPath) can be used with [supported JSONPath expressions](https://github.com/h2non/jsonpath-ng#jsonpath-syntax), the root being the response body.\n\n**Enum**\n\nThe allowed values for the property as zero or more arguments. If none given, the value of the property is not asserted.\n\n**Validations**\n\nThe JSON Schema validation keywords [for object](https://json-schema.org/understanding-json-schema/reference/object.html) can be used. Validations are optional but update the schema of the property (more accurate) if given. [Output Schema](#Output%20Schema) can be used for the current schema of the field.\n\nThe keyword will fail if any of the given validations fail. Given validations can be skipped altogether by adding `skip=true`. When skipped, the schema is updated but the validations are not ran. Skip is intented mainly for debugging the updated schema before aborting.\n\n**Examples**\n\n```\nGET  /users/1    # https://jsonplaceholder.typicode.com/users/1\nObject  response body    \nObject  response body  required=[\"id\", \"name\"]  # can have other properties\n``````\nGET  /users/1    # https://jsonplaceholder.typicode.com/users/1\nObject  $.address.geo  required=[\"lat\", \"lng\"]  \nObject  $..geo  additionalProperties=false  # cannot have other properties\n```"},{"name":"Options","args":["endpoint","timeout=None","allow_redirects=None","validate=True","headers=None"],"doc":"**Sends an OPTIONS request to the endpoint.**\n\nThe endpoint is joined with the URL given on library init (if any). If endpoint starts with `http://` or `https://`, it is assumed an URL outside the tested API (which may affect logging).\n\n**Options**\n\n`timeout`: A number of seconds to wait for the response before failing the keyword.\n\n`allow_redirects`: If false, do not follow any redirects.\n\n`validate`: If false, skips any request and response validations set by expectation keywords and a spec given on library init.\n\n`headers`: Headers as a JSON object to add or override for the request.\n\n**Examples**\n\n```\nOPTIONS  /users/1  \nOPTIONS  /users/1  allow_redirects=false\n```"},{"name":"Output","args":["what=","file_path=None","append=False","sort_keys=False"],"doc":"**Outputs JSON to terminal or a file.**\n\nBy default, the last request and response are output to terminal.\n\nThe output can be limited further by:\n\n*   The property of the last instance, e.g. `request` or `response`\n*   Any nested property that exists, similarly as for assertion keywords\n\nAlso variables and values that can be converted to JSON are accepted, in which case those are output as JSON instead.\n\n**Options**\n\n`file_path`: The JSON is written to a file instead of terminal. The file is created if it does not exist.\n\n`append`: If true, the JSON is appended to the given file instead of truncating it first.\n\n`sort_keys`: If true, the JSON is sorted alphabetically by property names before it is output.\n\n**Examples**\n\n```\nOutput  response  # only the response is output\nOutput  response body  # only the response body is output\nOutput  $.email  # only the response body property is output\nOutput  $..geo  # only the nested response body property is output\n``````\nOutput  request  # only the request is output\nOutput  request headers  # only the request headers are output\nOutput  request headers Authentication  # only this header is output\n``````\nOutput  response body  ${CURDIR}/response_body.json    # write the response body to a file\nOutput  response seconds  ${CURDIR}/response_delays.log  append=true  # keep track of response delays in a file\n```"},{"name":"Output Schema","args":["what=","file_path=None","append=False","sort_keys=False"],"doc":"**Outputs JSON Schema to terminal or a file.**\n\nBy default, the schema is output for the last request and response.\n\nThe output can be limited further by:\n\n*   The property of the last instance, e.g. `request` or `response`\n*   Any nested property that exists, similarly as for assertion keywords\n\nAlso variables and values that can be converted to JSON are accepted, in which case the schema is generated for those instead.\n\n**Options**\n\n`file_path`: The JSON Schema is written to a file instead of terminal. The file is created if it does not exist.\n\n`append`: If true, the JSON Schema is appended to the given file instead of truncating it first.\n\n`sort_keys`: If true, the JSON Schema is sorted alphabetically by property names before it is output.\n\n**Examples**\n\n```\nOutput Schema  response  ${CURDIR}/response_schema.json  # Write a file to use with Expect Response\nOutput Schema  response body  ${CURDIR}/response_body_schema.json  # Write a file to use with Expect Response Body\n``````\nOutput Schema  $.email  # only the schema for one response body property\nOutput Schema  $..geo  # only the schema for the nested response body property\n```"},{"name":"Patch","args":["endpoint","body=None","timeout=None","allow_redirects=None","validate=True","headers=None"],"doc":"**Sends a PATCH request to the endpoint.**\n\nThe endpoint is joined with the URL given on library init (if any). If endpoint starts with `http://` or `https://`, it is assumed an URL outside the tested API (which may affect logging).\n\n**Options**\n\n`body`: Request body parameters as a JSON object, file or a dictionary.\n\n`timeout`: A number of seconds to wait for the response before failing the keyword.\n\n`allow_redirects`: If false, do not follow any redirects.\n\n`validate`: If false, skips any request and response validations set by expectation keywords and a spec given on library init.\n\n`headers`: Headers as a JSON object to add or override for the request.\n\n**Examples**\n\n```\nPATCH  /users/4  { \"name\": \"Clementine Bauch\" }\nPATCH  /users/4  ${dict}\n```"},{"name":"Post","args":["endpoint","body=None","timeout=None","allow_redirects=None","validate=True","headers=None"],"doc":"**Sends a POST request to the endpoint.**\n\nThe endpoint is joined with the URL given on library init (if any). If endpoint starts with `http://` or `https://`, it is assumed an URL outside the tested API (which may affect logging).\n\n**Options**\n\n`body`: Request body parameters as a JSON object, file or a dictionary.\n\n`timeout`: A number of seconds to wait for the response before failing the keyword.\n\n`allow_redirects`: If false, do not follow any redirects.\n\n`validate`: If false, skips any request and response validations set by expectation keywords and a spec given on library init.\n\n`headers`: Headers as a JSON object to add or override for the request.\n\n**Examples**\n\n```\nPOST  /users  { \"id\": 11, \"name\": \"Gil Alexander\" }\nPOST  /users  ${CURDIR}/new_user.json\n```"},{"name":"Put","args":["endpoint","body=None","timeout=None","allow_redirects=None","validate=True","headers=None"],"doc":"**Sends a PUT request to the endpoint.**\n\nThe endpoint is joined with the URL given on library init (if any). If endpoint starts with `http://` or `https://`, it is assumed an URL outside the tested API (which may affect logging).\n\n**Options**\n\n`body`: Request body parameters as a JSON object, file or a dictionary.\n\n`timeout`: A number of seconds to wait for the response before failing the keyword.\n\n`allow_redirects`: If false, do not follow any redirects.\n\n`validate`: If false, skips any request and response validations set by expectation keywords and a spec given on library init.\n\n`headers`: Headers as a JSON object to add or override for the request.\n\n**Examples**\n\n```\nPUT  /users/2  { \"name\": \"Julie Langford\", \"username\": \"jlangfor\" }\nPUT  /users/2  ${dict}\n```"},{"name":"Rest Instances","args":["file_path=None","sort_keys=False"],"doc":"**Writes the instances as JSON to a file.**\n\nThe instances are written to file as a JSON array of JSON objects, each object representing a single instance, and having three properties:\n\n*   the request\n*   the response\n*   the schema for both, which have been updated according to the tests\n\nThe file is created if it does not exist, otherwise it is truncated.\n\n**Options**\n\n`sort_keys`: If true, the instances are sorted alphabetically by property names.\n\n**Examples**\n\n```\nRest Instances  ${CURDIR}/log.json\n```"},{"name":"Set Client Cert","args":["cert"],"doc":"**Sets the client cert for the requests.**\n\nThe cert is either a path to a .pem file, or a JSON array, or a list having the cert path and the key path.\n\nValues `null` and `${None}` can be used for clearing the cert.\n\n**Examples**\n\n```\nSet Client Cert  ${CURDIR}/client.pem\nSet Client Cert  [\"${CURDIR}/client.cert\", \"${CURDIR}/client.key\"]\nSet Client Cert  ${paths_list}\n```"},{"name":"Set Headers","args":["headers"],"doc":"**Sets new request headers or updates the existing.**\n\n`headers`: The headers to add or update as a JSON object or a dictionary.\n\n**Examples**\n\n```\nSet Headers  { \"authorization\": \"Basic QWxhZGRpbjpPcGVuU2VzYW1\"}\nSet Headers  { \"Accept-Encoding\": \"identity\"}\nSet Headers  ${auth_dict}\n```"},{"name":"String","args":["field","*enum","**validations"],"doc":"**Asserts the field as JSON string.**\n\nThe field consists of parts separated by spaces, the parts being object property names or array indices starting from 0, and the root being the instance created by the last request (see [Output](#Output) for it).\n\nFor asserting deeply nested properties or multiple objects at once, [JSONPath](http://goessner.net/articles/JsonPath) can be used with [supported JSONPath expressions](https://github.com/h2non/jsonpath-ng#jsonpath-syntax), the root being the response body.\n\n**Enum**\n\nThe allowed values for the property as zero or more arguments. If none given, the value of the property is not asserted.\n\n**Validations**\n\nThe JSON Schema validation keywords [for string](https://json-schema.org/understanding-json-schema/reference/string.html) can be used. Validations are optional but update the schema of the property (more accurate) if given. [Output Schema](#Output%20Schema) can be used for the current schema of the field.\n\nThe keyword will fail if any of the given validations fail. Given validations can be skipped altogether by adding `skip=true`. When skipped, the schema is updated but the validations are not ran. Skip is intented mainly for debugging the updated schema before aborting.\n\n**Examples**\n\n```\nGET  /users/1      # https://jsonplaceholder.typicode.com/users/1\nString  response body email      # value is optional\nString  response body email  Sincere@april.biz    \nString  $.email  Sincere@april.biz    # JSONPath alternative\nString  $.email    format=email  \n``````\nGET  /users?_limit=10      # https://jsonplaceholder.typicode.com/users\nString  response body 0 email  Sincere@april.biz    \nString  $[0].email  Sincere@april.biz    # same as above\nString  $[*].email    format=email  \n```"}]}